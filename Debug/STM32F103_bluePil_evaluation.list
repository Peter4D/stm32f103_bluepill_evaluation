
STM32F103_bluePil_evaluation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002318  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08002424  08002424  00012424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080024c8  080024c8  000124c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080024cc  080024cc  000124cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000044  20000000  080024d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000174  20000044  08002514  00020044  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001b8  08002514  000201b8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008952  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ac1  00000000  00000000  000289bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000778  00000000  00000000  0002a480  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000670  00000000  00000000  0002abf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003dae  00000000  00000000  0002b268  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000258d  00000000  00000000  0002f016  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000315a3  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001b9c  00000000  00000000  00031620  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000044 	.word	0x20000044
 8000128:	00000000 	.word	0x00000000
 800012c:	0800240c 	.word	0x0800240c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000048 	.word	0x20000048
 8000148:	0800240c 	.word	0x0800240c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0308 	add.w	r3, r7, #8
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4a18      	ldr	r2, [pc, #96]	; (80001d4 <MX_GPIO_Init+0x78>)
 8000172:	4b18      	ldr	r3, [pc, #96]	; (80001d4 <MX_GPIO_Init+0x78>)
 8000174:	699b      	ldr	r3, [r3, #24]
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b15      	ldr	r3, [pc, #84]	; (80001d4 <MX_GPIO_Init+0x78>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	607b      	str	r3, [r7, #4]
 8000186:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000188:	4a12      	ldr	r2, [pc, #72]	; (80001d4 <MX_GPIO_Init+0x78>)
 800018a:	4b12      	ldr	r3, [pc, #72]	; (80001d4 <MX_GPIO_Init+0x78>)
 800018c:	699b      	ldr	r3, [r3, #24]
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b0f      	ldr	r3, [pc, #60]	; (80001d4 <MX_GPIO_Init+0x78>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0304 	and.w	r3, r3, #4
 800019c:	603b      	str	r3, [r7, #0]
 800019e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PC13_GPIO_Port, LED_PC13_Pin, GPIO_PIN_RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a6:	480c      	ldr	r0, [pc, #48]	; (80001d8 <MX_GPIO_Init+0x7c>)
 80001a8:	f000 fd56 	bl	8000c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_PC13_Pin;
 80001ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80001b2:	2311      	movs	r3, #17
 80001b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001b6:	2300      	movs	r3, #0
 80001b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ba:	2302      	movs	r3, #2
 80001bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_PC13_GPIO_Port, &GPIO_InitStruct);
 80001be:	f107 0308 	add.w	r3, r7, #8
 80001c2:	4619      	mov	r1, r3
 80001c4:	4804      	ldr	r0, [pc, #16]	; (80001d8 <MX_GPIO_Init+0x7c>)
 80001c6:	f000 fbed 	bl	80009a4 <HAL_GPIO_Init>

}
 80001ca:	bf00      	nop
 80001cc:	3718      	adds	r7, #24
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40021000 	.word	0x40021000
 80001d8:	40011000 	.word	0x40011000

080001dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001dc:	b5b0      	push	{r4, r5, r7, lr}
 80001de:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e0:	f000 f9f6 	bl	80005d0 <HAL_Init>
    // x = RingBuff.get_nBytes(&ringBuffer_test);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e4:	f000 f89a 	bl	800031c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e8:	f7ff ffb8 	bl	800015c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001ec:	f000 f972 	bl	80004d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Serial_init(&serial_0_desc, &huart1);
 80001f0:	493b      	ldr	r1, [pc, #236]	; (80002e0 <main+0x104>)
 80001f2:	483c      	ldr	r0, [pc, #240]	; (80002e4 <main+0x108>)
 80001f4:	f001 fe9c 	bl	8001f30 <Serial_init>
  Serial.read_enable(&serial_0_desc);
 80001f8:	4b3b      	ldr	r3, [pc, #236]	; (80002e8 <main+0x10c>)
 80001fa:	68db      	ldr	r3, [r3, #12]
 80001fc:	4839      	ldr	r0, [pc, #228]	; (80002e4 <main+0x108>)
 80001fe:	4798      	blx	r3
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    if( (HAL_GetTick() - task_1_lastTick) > TASK_1_PER) {
 8000200:	f000 fa3e 	bl	8000680 <HAL_GetTick>
 8000204:	4602      	mov	r2, r0
 8000206:	4b39      	ldr	r3, [pc, #228]	; (80002ec <main+0x110>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	1ad3      	subs	r3, r2, r3
 800020c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000210:	d93a      	bls.n	8000288 <main+0xac>
        task_1_lastTick = HAL_GetTick();
 8000212:	f000 fa35 	bl	8000680 <HAL_GetTick>
 8000216:	4602      	mov	r2, r0
 8000218:	4b34      	ldr	r3, [pc, #208]	; (80002ec <main+0x110>)
 800021a:	601a      	str	r2, [r3, #0]

        HAL_GPIO_TogglePin(LED_PC13_GPIO_Port, LED_PC13_Pin);
 800021c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000220:	4833      	ldr	r0, [pc, #204]	; (80002f0 <main+0x114>)
 8000222:	f000 fd31 	bl	8000c88 <HAL_GPIO_TogglePin>
        upCnt++;
 8000226:	4b33      	ldr	r3, [pc, #204]	; (80002f4 <main+0x118>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	3301      	adds	r3, #1
 800022c:	4a31      	ldr	r2, [pc, #196]	; (80002f4 <main+0x118>)
 800022e:	6013      	str	r3, [r2, #0]

        strcpy(serial_msg, "upTime in seconds: ");
 8000230:	4a31      	ldr	r2, [pc, #196]	; (80002f8 <main+0x11c>)
 8000232:	4b32      	ldr	r3, [pc, #200]	; (80002fc <main+0x120>)
 8000234:	4614      	mov	r4, r2
 8000236:	461d      	mov	r5, r3
 8000238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800023a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800023c:	682b      	ldr	r3, [r5, #0]
 800023e:	6023      	str	r3, [r4, #0]
        num2str(upCnt, num_str);
 8000240:	4b2c      	ldr	r3, [pc, #176]	; (80002f4 <main+0x118>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	492e      	ldr	r1, [pc, #184]	; (8000300 <main+0x124>)
 8000246:	4618      	mov	r0, r3
 8000248:	f001 fd52 	bl	8001cf0 <num2str>
        strcat(serial_msg, num_str);
 800024c:	492c      	ldr	r1, [pc, #176]	; (8000300 <main+0x124>)
 800024e:	482a      	ldr	r0, [pc, #168]	; (80002f8 <main+0x11c>)
 8000250:	f002 f8cc 	bl	80023ec <strcat>
        strcat(serial_msg, "\n\r");
 8000254:	4828      	ldr	r0, [pc, #160]	; (80002f8 <main+0x11c>)
 8000256:	f7ff ff79 	bl	800014c <strlen>
 800025a:	4603      	mov	r3, r0
 800025c:	461a      	mov	r2, r3
 800025e:	4b26      	ldr	r3, [pc, #152]	; (80002f8 <main+0x11c>)
 8000260:	4413      	add	r3, r2
 8000262:	4a28      	ldr	r2, [pc, #160]	; (8000304 <main+0x128>)
 8000264:	8811      	ldrh	r1, [r2, #0]
 8000266:	7892      	ldrb	r2, [r2, #2]
 8000268:	8019      	strh	r1, [r3, #0]
 800026a:	709a      	strb	r2, [r3, #2]
        
        serial_msg_len = strlen(serial_msg);
 800026c:	4822      	ldr	r0, [pc, #136]	; (80002f8 <main+0x11c>)
 800026e:	f7ff ff6d 	bl	800014c <strlen>
 8000272:	4603      	mov	r3, r0
 8000274:	b2da      	uxtb	r2, r3
 8000276:	4b24      	ldr	r3, [pc, #144]	; (8000308 <main+0x12c>)
 8000278:	701a      	strb	r2, [r3, #0]
        //HAL_UART_Transmit_IT(&huart1, serial_msg, serial_msg_len);
        Serial.write(&serial_0_desc, serial_msg, serial_msg_len);
 800027a:	4b1b      	ldr	r3, [pc, #108]	; (80002e8 <main+0x10c>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a22      	ldr	r2, [pc, #136]	; (8000308 <main+0x12c>)
 8000280:	7812      	ldrb	r2, [r2, #0]
 8000282:	491d      	ldr	r1, [pc, #116]	; (80002f8 <main+0x11c>)
 8000284:	4817      	ldr	r0, [pc, #92]	; (80002e4 <main+0x108>)
 8000286:	4798      	blx	r3
        // Serial.println(&serial_0_desc, "test_serial #2\r");
        // Serial.println(&serial_0_desc, "test_serial #3\r");

    } 

    if( (HAL_GetTick() - task_2_lastTick) > TASK_2_PER) {
 8000288:	f000 f9fa 	bl	8000680 <HAL_GetTick>
 800028c:	4602      	mov	r2, r0
 800028e:	4b1f      	ldr	r3, [pc, #124]	; (800030c <main+0x130>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	1ad3      	subs	r3, r2, r3
 8000294:	2b0a      	cmp	r3, #10
 8000296:	d9b3      	bls.n	8000200 <main+0x24>
        task_2_lastTick = HAL_GetTick();
 8000298:	f000 f9f2 	bl	8000680 <HAL_GetTick>
 800029c:	4602      	mov	r2, r0
 800029e:	4b1b      	ldr	r3, [pc, #108]	; (800030c <main+0x130>)
 80002a0:	601a      	str	r2, [r3, #0]

        while(Serial.isData(&serial_0_desc) > 0){
 80002a2:	e015      	b.n	80002d0 <main+0xf4>
            //read_ch_cnt = Serial.readUntil(&serial_0_desc, serRx_buff, SER_RX_BUFF_SIZE, '\r');
            read_ch_cnt = Serial.read(&serial_0_desc, serRx_buff, 1);
 80002a4:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <main+0x10c>)
 80002a6:	691b      	ldr	r3, [r3, #16]
 80002a8:	2201      	movs	r2, #1
 80002aa:	4919      	ldr	r1, [pc, #100]	; (8000310 <main+0x134>)
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <main+0x108>)
 80002ae:	4798      	blx	r3
 80002b0:	4603      	mov	r3, r0
 80002b2:	461a      	mov	r2, r3
 80002b4:	4b17      	ldr	r3, [pc, #92]	; (8000314 <main+0x138>)
 80002b6:	801a      	strh	r2, [r3, #0]
            Serial.write(&serial_0_desc, serRx_buff, read_ch_cnt);
 80002b8:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <main+0x10c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a15      	ldr	r2, [pc, #84]	; (8000314 <main+0x138>)
 80002be:	8812      	ldrh	r2, [r2, #0]
 80002c0:	4913      	ldr	r1, [pc, #76]	; (8000310 <main+0x134>)
 80002c2:	4808      	ldr	r0, [pc, #32]	; (80002e4 <main+0x108>)
 80002c4:	4798      	blx	r3
            Serial.print(&serial_0_desc, "\r\n");
 80002c6:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <main+0x10c>)
 80002c8:	685b      	ldr	r3, [r3, #4]
 80002ca:	4913      	ldr	r1, [pc, #76]	; (8000318 <main+0x13c>)
 80002cc:	4805      	ldr	r0, [pc, #20]	; (80002e4 <main+0x108>)
 80002ce:	4798      	blx	r3
        while(Serial.isData(&serial_0_desc) > 0){
 80002d0:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <main+0x10c>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4803      	ldr	r0, [pc, #12]	; (80002e4 <main+0x108>)
 80002d6:	4798      	blx	r3
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d1e2      	bne.n	80002a4 <main+0xc8>
    if( (HAL_GetTick() - task_1_lastTick) > TASK_1_PER) {
 80002de:	e78f      	b.n	8000200 <main+0x24>
 80002e0:	200000dc 	.word	0x200000dc
 80002e4:	2000000c 	.word	0x2000000c
 80002e8:	20000024 	.word	0x20000024
 80002ec:	20000060 	.word	0x20000060
 80002f0:	40011000 	.word	0x40011000
 80002f4:	20000064 	.word	0x20000064
 80002f8:	20000068 	.word	0x20000068
 80002fc:	08002424 	.word	0x08002424
 8000300:	20000088 	.word	0x20000088
 8000304:	08002438 	.word	0x08002438
 8000308:	20000092 	.word	0x20000092
 800030c:	20000094 	.word	0x20000094
 8000310:	20000098 	.word	0x20000098
 8000314:	200000ca 	.word	0x200000ca
 8000318:	0800243c 	.word	0x0800243c

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b090      	sub	sp, #64	; 0x40
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	f107 0318 	add.w	r3, r7, #24
 8000326:	2228      	movs	r2, #40	; 0x28
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f002 f856 	bl	80023dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
 800033c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800033e:	2302      	movs	r3, #2
 8000340:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000342:	2301      	movs	r3, #1
 8000344:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000346:	2310      	movs	r3, #16
 8000348:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800034a:	2300      	movs	r3, #0
 800034c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034e:	f107 0318 	add.w	r3, r7, #24
 8000352:	4618      	mov	r0, r3
 8000354:	f000 fcb0 	bl	8000cb8 <HAL_RCC_OscConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800035e:	f000 f818 	bl	8000392 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000362:	230f      	movs	r3, #15
 8000364:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000366:	2300      	movs	r3, #0
 8000368:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f000 ff1c 	bl	80011b8 <HAL_RCC_ClockConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000386:	f000 f804 	bl	8000392 <Error_Handler>
  }
}
 800038a:	bf00      	nop
 800038c:	3740      	adds	r7, #64	; 0x40
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}

08000392 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000396:	bf00      	nop
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
	...

080003a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003a6:	4a15      	ldr	r2, [pc, #84]	; (80003fc <HAL_MspInit+0x5c>)
 80003a8:	4b14      	ldr	r3, [pc, #80]	; (80003fc <HAL_MspInit+0x5c>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6193      	str	r3, [r2, #24]
 80003b2:	4b12      	ldr	r3, [pc, #72]	; (80003fc <HAL_MspInit+0x5c>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003be:	4a0f      	ldr	r2, [pc, #60]	; (80003fc <HAL_MspInit+0x5c>)
 80003c0:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <HAL_MspInit+0x5c>)
 80003c2:	69db      	ldr	r3, [r3, #28]
 80003c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c8:	61d3      	str	r3, [r2, #28]
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <HAL_MspInit+0x5c>)
 80003cc:	69db      	ldr	r3, [r3, #28]
 80003ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003d6:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <HAL_MspInit+0x60>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <HAL_MspInit+0x60>)
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40021000 	.word	0x40021000
 8000400:	40010000 	.word	0x40010000

08000404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000414:	e7fe      	b.n	8000414 <HardFault_Handler+0x4>

08000416 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800041a:	e7fe      	b.n	800041a <MemManage_Handler+0x4>

0800041c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000420:	e7fe      	b.n	8000420 <BusFault_Handler+0x4>

08000422 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000426:	e7fe      	b.n	8000426 <UsageFault_Handler+0x4>

08000428 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000450:	f000 f904 	bl	800065c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}

08000458 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800045c:	4802      	ldr	r0, [pc, #8]	; (8000468 <USART1_IRQHandler+0x10>)
 800045e:	f001 f92d 	bl	80016bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	200000dc 	.word	0x200000dc

0800046c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000470:	4a15      	ldr	r2, [pc, #84]	; (80004c8 <SystemInit+0x5c>)
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <SystemInit+0x5c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f043 0301 	orr.w	r3, r3, #1
 800047a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800047c:	4912      	ldr	r1, [pc, #72]	; (80004c8 <SystemInit+0x5c>)
 800047e:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <SystemInit+0x5c>)
 8000480:	685a      	ldr	r2, [r3, #4]
 8000482:	4b12      	ldr	r3, [pc, #72]	; (80004cc <SystemInit+0x60>)
 8000484:	4013      	ands	r3, r2
 8000486:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000488:	4a0f      	ldr	r2, [pc, #60]	; (80004c8 <SystemInit+0x5c>)
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <SystemInit+0x5c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000496:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000498:	4a0b      	ldr	r2, [pc, #44]	; (80004c8 <SystemInit+0x5c>)
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <SystemInit+0x5c>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004a2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80004a4:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <SystemInit+0x5c>)
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <SystemInit+0x5c>)
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80004ae:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <SystemInit+0x5c>)
 80004b2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80004b6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <SystemInit+0x64>)
 80004ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004be:	609a      	str	r2, [r3, #8]
#endif 
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	40021000 	.word	0x40021000
 80004cc:	f8ff0000 	.word	0xf8ff0000
 80004d0:	e000ed00 	.word	0xe000ed00

080004d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <MX_USART1_UART_Init+0x4c>)
 80004da:	4a12      	ldr	r2, [pc, #72]	; (8000524 <MX_USART1_UART_Init+0x50>)
 80004dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <MX_USART1_UART_Init+0x4c>)
 80004e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <MX_USART1_UART_Init+0x4c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <MX_USART1_UART_Init+0x4c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <MX_USART1_UART_Init+0x4c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_USART1_UART_Init+0x4c>)
 80004fa:	220c      	movs	r2, #12
 80004fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <MX_USART1_UART_Init+0x4c>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MX_USART1_UART_Init+0x4c>)
 8000506:	2200      	movs	r2, #0
 8000508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_USART1_UART_Init+0x4c>)
 800050c:	f000 fff0 	bl	80014f0 <HAL_UART_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000516:	f7ff ff3c 	bl	8000392 <Error_Handler>
  }

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200000dc 	.word	0x200000dc
 8000524:	40013800 	.word	0x40013800

08000528 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a20      	ldr	r2, [pc, #128]	; (80005c4 <HAL_UART_MspInit+0x9c>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d139      	bne.n	80005bc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000548:	4a1f      	ldr	r2, [pc, #124]	; (80005c8 <HAL_UART_MspInit+0xa0>)
 800054a:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <HAL_UART_MspInit+0xa0>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <HAL_UART_MspInit+0xa0>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000560:	4a19      	ldr	r2, [pc, #100]	; (80005c8 <HAL_UART_MspInit+0xa0>)
 8000562:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <HAL_UART_MspInit+0xa0>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	f043 0304 	orr.w	r3, r3, #4
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <HAL_UART_MspInit+0xa0>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0304 	and.w	r3, r3, #4
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800057c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057e:	2302      	movs	r3, #2
 8000580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000582:	2303      	movs	r3, #3
 8000584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000586:	f107 0310 	add.w	r3, r7, #16
 800058a:	4619      	mov	r1, r3
 800058c:	480f      	ldr	r0, [pc, #60]	; (80005cc <HAL_UART_MspInit+0xa4>)
 800058e:	f000 fa09 	bl	80009a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000596:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4619      	mov	r1, r3
 80005a6:	4809      	ldr	r0, [pc, #36]	; (80005cc <HAL_UART_MspInit+0xa4>)
 80005a8:	f000 f9fc 	bl	80009a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	2025      	movs	r0, #37	; 0x25
 80005b2:	f000 f944 	bl	800083e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005b6:	2025      	movs	r0, #37	; 0x25
 80005b8:	f000 f95d 	bl	8000876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40013800 	.word	0x40013800
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010800 	.word	0x40010800

080005d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d4:	4a08      	ldr	r2, [pc, #32]	; (80005f8 <HAL_Init+0x28>)
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <HAL_Init+0x28>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f043 0310 	orr.w	r3, r3, #16
 80005de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e0:	2003      	movs	r0, #3
 80005e2:	f000 f921 	bl	8000828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f000 f808 	bl	80005fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005ec:	f7ff fed8 	bl	80003a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40022000 	.word	0x40022000

080005fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_InitTick+0x54>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_InitTick+0x58>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4619      	mov	r1, r3
 800060e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000612:	fbb3 f3f1 	udiv	r3, r3, r1
 8000616:	fbb2 f3f3 	udiv	r3, r2, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f939 	bl	8000892 <HAL_SYSTICK_Config>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000626:	2301      	movs	r3, #1
 8000628:	e00e      	b.n	8000648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b0f      	cmp	r3, #15
 800062e:	d80a      	bhi.n	8000646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000630:	2200      	movs	r2, #0
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	f04f 30ff 	mov.w	r0, #4294967295
 8000638:	f000 f901 	bl	800083e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <HAL_InitTick+0x5c>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000642:	2300      	movs	r3, #0
 8000644:	e000      	b.n	8000648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000000 	.word	0x20000000
 8000654:	20000008 	.word	0x20000008
 8000658:	20000004 	.word	0x20000004

0800065c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <HAL_IncTick+0x1c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <HAL_IncTick+0x20>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4413      	add	r3, r2
 800066c:	4a03      	ldr	r2, [pc, #12]	; (800067c <HAL_IncTick+0x20>)
 800066e:	6013      	str	r3, [r2, #0]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	20000008 	.word	0x20000008
 800067c:	2000011c 	.word	0x2000011c

08000680 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return uwTick;
 8000684:	4b02      	ldr	r3, [pc, #8]	; (8000690 <HAL_GetTick+0x10>)
 8000686:	681b      	ldr	r3, [r3, #0]
}
 8000688:	4618      	mov	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	2000011c 	.word	0x2000011c

08000694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f003 0307 	and.w	r3, r3, #7
 80006a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <__NVIC_SetPriorityGrouping+0x44>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006aa:	68ba      	ldr	r2, [r7, #8]
 80006ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b0:	4013      	ands	r3, r2
 80006b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006c6:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <__NVIC_SetPriorityGrouping+0x44>)
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	60d3      	str	r3, [r2, #12]
}
 80006cc:	bf00      	nop
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <__NVIC_GetPriorityGrouping+0x18>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	0a1b      	lsrs	r3, r3, #8
 80006e6:	f003 0307 	and.w	r3, r3, #7
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	2b00      	cmp	r3, #0
 8000708:	db0b      	blt.n	8000722 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070a:	4908      	ldr	r1, [pc, #32]	; (800072c <__NVIC_EnableIRQ+0x34>)
 800070c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000710:	095b      	lsrs	r3, r3, #5
 8000712:	79fa      	ldrb	r2, [r7, #7]
 8000714:	f002 021f 	and.w	r2, r2, #31
 8000718:	2001      	movs	r0, #1
 800071a:	fa00 f202 	lsl.w	r2, r0, r2
 800071e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	e000e100 	.word	0xe000e100

08000730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800073c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000740:	2b00      	cmp	r3, #0
 8000742:	db0a      	blt.n	800075a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000744:	490d      	ldr	r1, [pc, #52]	; (800077c <__NVIC_SetPriority+0x4c>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	683a      	ldr	r2, [r7, #0]
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	0112      	lsls	r2, r2, #4
 8000750:	b2d2      	uxtb	r2, r2
 8000752:	440b      	add	r3, r1
 8000754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000758:	e00a      	b.n	8000770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075a:	4909      	ldr	r1, [pc, #36]	; (8000780 <__NVIC_SetPriority+0x50>)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	3b04      	subs	r3, #4
 8000764:	683a      	ldr	r2, [r7, #0]
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	0112      	lsls	r2, r2, #4
 800076a:	b2d2      	uxtb	r2, r2
 800076c:	440b      	add	r3, r1
 800076e:	761a      	strb	r2, [r3, #24]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000e100 	.word	0xe000e100
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000784:	b480      	push	{r7}
 8000786:	b089      	sub	sp, #36	; 0x24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f003 0307 	and.w	r3, r3, #7
 8000796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	f1c3 0307 	rsb	r3, r3, #7
 800079e:	2b04      	cmp	r3, #4
 80007a0:	bf28      	it	cs
 80007a2:	2304      	movcs	r3, #4
 80007a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3304      	adds	r3, #4
 80007aa:	2b06      	cmp	r3, #6
 80007ac:	d902      	bls.n	80007b4 <NVIC_EncodePriority+0x30>
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3b03      	subs	r3, #3
 80007b2:	e000      	b.n	80007b6 <NVIC_EncodePriority+0x32>
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b8:	2201      	movs	r2, #1
 80007ba:	69bb      	ldr	r3, [r7, #24]
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	1e5a      	subs	r2, r3, #1
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	401a      	ands	r2, r3
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ca:	2101      	movs	r1, #1
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	fa01 f303 	lsl.w	r3, r1, r3
 80007d2:	1e59      	subs	r1, r3, #1
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	4313      	orrs	r3, r2
         );
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3724      	adds	r7, #36	; 0x24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007f4:	d301      	bcc.n	80007fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007f6:	2301      	movs	r3, #1
 80007f8:	e00f      	b.n	800081a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <SysTick_Config+0x40>)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000802:	210f      	movs	r1, #15
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	f7ff ff92 	bl	8000730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <SysTick_Config+0x40>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000812:	4b04      	ldr	r3, [pc, #16]	; (8000824 <SysTick_Config+0x40>)
 8000814:	2207      	movs	r2, #7
 8000816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	e000e010 	.word	0xe000e010

08000828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff ff2f 	bl	8000694 <__NVIC_SetPriorityGrouping>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800083e:	b580      	push	{r7, lr}
 8000840:	b086      	sub	sp, #24
 8000842:	af00      	add	r7, sp, #0
 8000844:	4603      	mov	r3, r0
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
 800084a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000850:	f7ff ff44 	bl	80006dc <__NVIC_GetPriorityGrouping>
 8000854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	68b9      	ldr	r1, [r7, #8]
 800085a:	6978      	ldr	r0, [r7, #20]
 800085c:	f7ff ff92 	bl	8000784 <NVIC_EncodePriority>
 8000860:	4602      	mov	r2, r0
 8000862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000866:	4611      	mov	r1, r2
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff61 	bl	8000730 <__NVIC_SetPriority>
}
 800086e:	bf00      	nop
 8000870:	3718      	adds	r7, #24
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	4603      	mov	r3, r0
 800087e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff37 	bl	80006f8 <__NVIC_EnableIRQ>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ffa2 	bl	80007e4 <SysTick_Config>
 80008a0:	4603      	mov	r3, r0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008b4:	2300      	movs	r3, #0
 80008b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d005      	beq.n	80008ce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2204      	movs	r2, #4
 80008c6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80008c8:	2301      	movs	r3, #1
 80008ca:	73fb      	strb	r3, [r7, #15]
 80008cc:	e057      	b.n	800097e <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	6812      	ldr	r2, [r2, #0]
 80008d6:	6812      	ldr	r2, [r2, #0]
 80008d8:	f022 020e 	bic.w	r2, r2, #14
 80008dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	6812      	ldr	r2, [r2, #0]
 80008e6:	6812      	ldr	r2, [r2, #0]
 80008e8:	f022 0201 	bic.w	r2, r2, #1
 80008ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80008ee:	4a26      	ldr	r2, [pc, #152]	; (8000988 <HAL_DMA_Abort_IT+0xdc>)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4619      	mov	r1, r3
 80008f6:	4b25      	ldr	r3, [pc, #148]	; (800098c <HAL_DMA_Abort_IT+0xe0>)
 80008f8:	4299      	cmp	r1, r3
 80008fa:	d02e      	beq.n	800095a <HAL_DMA_Abort_IT+0xae>
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	4b23      	ldr	r3, [pc, #140]	; (8000990 <HAL_DMA_Abort_IT+0xe4>)
 8000904:	4299      	cmp	r1, r3
 8000906:	d026      	beq.n	8000956 <HAL_DMA_Abort_IT+0xaa>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	4b21      	ldr	r3, [pc, #132]	; (8000994 <HAL_DMA_Abort_IT+0xe8>)
 8000910:	4299      	cmp	r1, r3
 8000912:	d01d      	beq.n	8000950 <HAL_DMA_Abort_IT+0xa4>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <HAL_DMA_Abort_IT+0xec>)
 800091c:	4299      	cmp	r1, r3
 800091e:	d014      	beq.n	800094a <HAL_DMA_Abort_IT+0x9e>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	4b1d      	ldr	r3, [pc, #116]	; (800099c <HAL_DMA_Abort_IT+0xf0>)
 8000928:	4299      	cmp	r1, r3
 800092a:	d00b      	beq.n	8000944 <HAL_DMA_Abort_IT+0x98>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <HAL_DMA_Abort_IT+0xf4>)
 8000934:	4299      	cmp	r1, r3
 8000936:	d102      	bne.n	800093e <HAL_DMA_Abort_IT+0x92>
 8000938:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800093c:	e00e      	b.n	800095c <HAL_DMA_Abort_IT+0xb0>
 800093e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000942:	e00b      	b.n	800095c <HAL_DMA_Abort_IT+0xb0>
 8000944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000948:	e008      	b.n	800095c <HAL_DMA_Abort_IT+0xb0>
 800094a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094e:	e005      	b.n	800095c <HAL_DMA_Abort_IT+0xb0>
 8000950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000954:	e002      	b.n	800095c <HAL_DMA_Abort_IT+0xb0>
 8000956:	2310      	movs	r3, #16
 8000958:	e000      	b.n	800095c <HAL_DMA_Abort_IT+0xb0>
 800095a:	2301      	movs	r3, #1
 800095c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2201      	movs	r2, #1
 8000962:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2200      	movs	r2, #0
 800096a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	4798      	blx	r3
    } 
  }
  return status;
 800097e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40020000 	.word	0x40020000
 800098c:	40020008 	.word	0x40020008
 8000990:	4002001c 	.word	0x4002001c
 8000994:	40020030 	.word	0x40020030
 8000998:	40020044 	.word	0x40020044
 800099c:	40020058 	.word	0x40020058
 80009a0:	4002006c 	.word	0x4002006c

080009a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b08b      	sub	sp, #44	; 0x2c
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b6:	e127      	b.n	8000c08 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009b8:	2201      	movs	r2, #1
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	4013      	ands	r3, r2
 80009ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	f040 8116 	bne.w	8000c02 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	2b12      	cmp	r3, #18
 80009dc:	d034      	beq.n	8000a48 <HAL_GPIO_Init+0xa4>
 80009de:	2b12      	cmp	r3, #18
 80009e0:	d80d      	bhi.n	80009fe <HAL_GPIO_Init+0x5a>
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d02b      	beq.n	8000a3e <HAL_GPIO_Init+0x9a>
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d804      	bhi.n	80009f4 <HAL_GPIO_Init+0x50>
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d031      	beq.n	8000a52 <HAL_GPIO_Init+0xae>
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d01c      	beq.n	8000a2c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009f2:	e048      	b.n	8000a86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009f4:	2b03      	cmp	r3, #3
 80009f6:	d043      	beq.n	8000a80 <HAL_GPIO_Init+0xdc>
 80009f8:	2b11      	cmp	r3, #17
 80009fa:	d01b      	beq.n	8000a34 <HAL_GPIO_Init+0x90>
          break;
 80009fc:	e043      	b.n	8000a86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009fe:	4a89      	ldr	r2, [pc, #548]	; (8000c24 <HAL_GPIO_Init+0x280>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d026      	beq.n	8000a52 <HAL_GPIO_Init+0xae>
 8000a04:	4a87      	ldr	r2, [pc, #540]	; (8000c24 <HAL_GPIO_Init+0x280>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d806      	bhi.n	8000a18 <HAL_GPIO_Init+0x74>
 8000a0a:	4a87      	ldr	r2, [pc, #540]	; (8000c28 <HAL_GPIO_Init+0x284>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d020      	beq.n	8000a52 <HAL_GPIO_Init+0xae>
 8000a10:	4a86      	ldr	r2, [pc, #536]	; (8000c2c <HAL_GPIO_Init+0x288>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d01d      	beq.n	8000a52 <HAL_GPIO_Init+0xae>
          break;
 8000a16:	e036      	b.n	8000a86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a18:	4a85      	ldr	r2, [pc, #532]	; (8000c30 <HAL_GPIO_Init+0x28c>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d019      	beq.n	8000a52 <HAL_GPIO_Init+0xae>
 8000a1e:	4a85      	ldr	r2, [pc, #532]	; (8000c34 <HAL_GPIO_Init+0x290>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d016      	beq.n	8000a52 <HAL_GPIO_Init+0xae>
 8000a24:	4a84      	ldr	r2, [pc, #528]	; (8000c38 <HAL_GPIO_Init+0x294>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d013      	beq.n	8000a52 <HAL_GPIO_Init+0xae>
          break;
 8000a2a:	e02c      	b.n	8000a86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	623b      	str	r3, [r7, #32]
          break;
 8000a32:	e028      	b.n	8000a86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	623b      	str	r3, [r7, #32]
          break;
 8000a3c:	e023      	b.n	8000a86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	3308      	adds	r3, #8
 8000a44:	623b      	str	r3, [r7, #32]
          break;
 8000a46:	e01e      	b.n	8000a86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	330c      	adds	r3, #12
 8000a4e:	623b      	str	r3, [r7, #32]
          break;
 8000a50:	e019      	b.n	8000a86 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d102      	bne.n	8000a60 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	623b      	str	r3, [r7, #32]
          break;
 8000a5e:	e012      	b.n	8000a86 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d105      	bne.n	8000a74 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	69fa      	ldr	r2, [r7, #28]
 8000a70:	611a      	str	r2, [r3, #16]
          break;
 8000a72:	e008      	b.n	8000a86 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a74:	2308      	movs	r3, #8
 8000a76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	69fa      	ldr	r2, [r7, #28]
 8000a7c:	615a      	str	r2, [r3, #20]
          break;
 8000a7e:	e002      	b.n	8000a86 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
          break;
 8000a84:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	2bff      	cmp	r3, #255	; 0xff
 8000a8a:	d801      	bhi.n	8000a90 <HAL_GPIO_Init+0xec>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	e001      	b.n	8000a94 <HAL_GPIO_Init+0xf0>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3304      	adds	r3, #4
 8000a94:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	2bff      	cmp	r3, #255	; 0xff
 8000a9a:	d802      	bhi.n	8000aa2 <HAL_GPIO_Init+0xfe>
 8000a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	e002      	b.n	8000aa8 <HAL_GPIO_Init+0x104>
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa4:	3b08      	subs	r3, #8
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	210f      	movs	r1, #15
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	401a      	ands	r2, r3
 8000aba:	6a39      	ldr	r1, [r7, #32]
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	f000 8096 	beq.w	8000c02 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad6:	4a59      	ldr	r2, [pc, #356]	; (8000c3c <HAL_GPIO_Init+0x298>)
 8000ad8:	4b58      	ldr	r3, [pc, #352]	; (8000c3c <HAL_GPIO_Init+0x298>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6193      	str	r3, [r2, #24]
 8000ae2:	4b56      	ldr	r3, [pc, #344]	; (8000c3c <HAL_GPIO_Init+0x298>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000aee:	4a54      	ldr	r2, [pc, #336]	; (8000c40 <HAL_GPIO_Init+0x29c>)
 8000af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	3302      	adds	r3, #2
 8000af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	f003 0303 	and.w	r3, r3, #3
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	220f      	movs	r2, #15
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a4b      	ldr	r2, [pc, #300]	; (8000c44 <HAL_GPIO_Init+0x2a0>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d013      	beq.n	8000b42 <HAL_GPIO_Init+0x19e>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a4a      	ldr	r2, [pc, #296]	; (8000c48 <HAL_GPIO_Init+0x2a4>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d00d      	beq.n	8000b3e <HAL_GPIO_Init+0x19a>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a49      	ldr	r2, [pc, #292]	; (8000c4c <HAL_GPIO_Init+0x2a8>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d007      	beq.n	8000b3a <HAL_GPIO_Init+0x196>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a48      	ldr	r2, [pc, #288]	; (8000c50 <HAL_GPIO_Init+0x2ac>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d101      	bne.n	8000b36 <HAL_GPIO_Init+0x192>
 8000b32:	2303      	movs	r3, #3
 8000b34:	e006      	b.n	8000b44 <HAL_GPIO_Init+0x1a0>
 8000b36:	2304      	movs	r3, #4
 8000b38:	e004      	b.n	8000b44 <HAL_GPIO_Init+0x1a0>
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	e002      	b.n	8000b44 <HAL_GPIO_Init+0x1a0>
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e000      	b.n	8000b44 <HAL_GPIO_Init+0x1a0>
 8000b42:	2300      	movs	r3, #0
 8000b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b46:	f002 0203 	and.w	r2, r2, #3
 8000b4a:	0092      	lsls	r2, r2, #2
 8000b4c:	4093      	lsls	r3, r2
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b54:	493a      	ldr	r1, [pc, #232]	; (8000c40 <HAL_GPIO_Init+0x29c>)
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	089b      	lsrs	r3, r3, #2
 8000b5a:	3302      	adds	r3, #2
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d006      	beq.n	8000b7c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b6e:	4939      	ldr	r1, [pc, #228]	; (8000c54 <HAL_GPIO_Init+0x2b0>)
 8000b70:	4b38      	ldr	r3, [pc, #224]	; (8000c54 <HAL_GPIO_Init+0x2b0>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	600b      	str	r3, [r1, #0]
 8000b7a:	e006      	b.n	8000b8a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b7c:	4935      	ldr	r1, [pc, #212]	; (8000c54 <HAL_GPIO_Init+0x2b0>)
 8000b7e:	4b35      	ldr	r3, [pc, #212]	; (8000c54 <HAL_GPIO_Init+0x2b0>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	4013      	ands	r3, r2
 8000b88:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d006      	beq.n	8000ba4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b96:	492f      	ldr	r1, [pc, #188]	; (8000c54 <HAL_GPIO_Init+0x2b0>)
 8000b98:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <HAL_GPIO_Init+0x2b0>)
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	604b      	str	r3, [r1, #4]
 8000ba2:	e006      	b.n	8000bb2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ba4:	492b      	ldr	r1, [pc, #172]	; (8000c54 <HAL_GPIO_Init+0x2b0>)
 8000ba6:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <HAL_GPIO_Init+0x2b0>)
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	4013      	ands	r3, r2
 8000bb0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d006      	beq.n	8000bcc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bbe:	4925      	ldr	r1, [pc, #148]	; (8000c54 <HAL_GPIO_Init+0x2b0>)
 8000bc0:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <HAL_GPIO_Init+0x2b0>)
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	608b      	str	r3, [r1, #8]
 8000bca:	e006      	b.n	8000bda <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bcc:	4921      	ldr	r1, [pc, #132]	; (8000c54 <HAL_GPIO_Init+0x2b0>)
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <HAL_GPIO_Init+0x2b0>)
 8000bd0:	689a      	ldr	r2, [r3, #8]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d006      	beq.n	8000bf4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000be6:	491b      	ldr	r1, [pc, #108]	; (8000c54 <HAL_GPIO_Init+0x2b0>)
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <HAL_GPIO_Init+0x2b0>)
 8000bea:	68da      	ldr	r2, [r3, #12]
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	60cb      	str	r3, [r1, #12]
 8000bf2:	e006      	b.n	8000c02 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bf4:	4917      	ldr	r1, [pc, #92]	; (8000c54 <HAL_GPIO_Init+0x2b0>)
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_GPIO_Init+0x2b0>)
 8000bf8:	68da      	ldr	r2, [r3, #12]
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	4013      	ands	r3, r2
 8000c00:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c04:	3301      	adds	r3, #1
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f47f aed0 	bne.w	80009b8 <HAL_GPIO_Init+0x14>
  }
}
 8000c18:	bf00      	nop
 8000c1a:	372c      	adds	r7, #44	; 0x2c
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	10210000 	.word	0x10210000
 8000c28:	10110000 	.word	0x10110000
 8000c2c:	10120000 	.word	0x10120000
 8000c30:	10310000 	.word	0x10310000
 8000c34:	10320000 	.word	0x10320000
 8000c38:	10220000 	.word	0x10220000
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010000 	.word	0x40010000
 8000c44:	40010800 	.word	0x40010800
 8000c48:	40010c00 	.word	0x40010c00
 8000c4c:	40011000 	.word	0x40011000
 8000c50:	40011400 	.word	0x40011400
 8000c54:	40010400 	.word	0x40010400

08000c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
 8000c64:	4613      	mov	r3, r2
 8000c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c68:	787b      	ldrb	r3, [r7, #1]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c6e:	887a      	ldrh	r2, [r7, #2]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c74:	e003      	b.n	8000c7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c76:	887b      	ldrh	r3, [r7, #2]
 8000c78:	041a      	lsls	r2, r3, #16
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	611a      	str	r2, [r3, #16]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68da      	ldr	r2, [r3, #12]
 8000c98:	887b      	ldrh	r3, [r7, #2]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d003      	beq.n	8000ca8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ca0:	887a      	ldrh	r2, [r7, #2]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000ca6:	e002      	b.n	8000cae <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ca8:	887a      	ldrh	r2, [r7, #2]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	611a      	str	r2, [r3, #16]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e26c      	b.n	80011a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 8087 	beq.w	8000de6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cd8:	4b92      	ldr	r3, [pc, #584]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 030c 	and.w	r3, r3, #12
 8000ce0:	2b04      	cmp	r3, #4
 8000ce2:	d00c      	beq.n	8000cfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ce4:	4b8f      	ldr	r3, [pc, #572]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 030c 	and.w	r3, r3, #12
 8000cec:	2b08      	cmp	r3, #8
 8000cee:	d112      	bne.n	8000d16 <HAL_RCC_OscConfig+0x5e>
 8000cf0:	4b8c      	ldr	r3, [pc, #560]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cfc:	d10b      	bne.n	8000d16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cfe:	4b89      	ldr	r3, [pc, #548]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d06c      	beq.n	8000de4 <HAL_RCC_OscConfig+0x12c>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d168      	bne.n	8000de4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e246      	b.n	80011a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d1e:	d106      	bne.n	8000d2e <HAL_RCC_OscConfig+0x76>
 8000d20:	4a80      	ldr	r2, [pc, #512]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	4b80      	ldr	r3, [pc, #512]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	e02e      	b.n	8000d8c <HAL_RCC_OscConfig+0xd4>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10c      	bne.n	8000d50 <HAL_RCC_OscConfig+0x98>
 8000d36:	4a7b      	ldr	r2, [pc, #492]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	4b7a      	ldr	r3, [pc, #488]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	4a78      	ldr	r2, [pc, #480]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	4b77      	ldr	r3, [pc, #476]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	e01d      	b.n	8000d8c <HAL_RCC_OscConfig+0xd4>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d58:	d10c      	bne.n	8000d74 <HAL_RCC_OscConfig+0xbc>
 8000d5a:	4a72      	ldr	r2, [pc, #456]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	4b71      	ldr	r3, [pc, #452]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	4a6f      	ldr	r2, [pc, #444]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	4b6e      	ldr	r3, [pc, #440]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	e00b      	b.n	8000d8c <HAL_RCC_OscConfig+0xd4>
 8000d74:	4a6b      	ldr	r2, [pc, #428]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	4b6b      	ldr	r3, [pc, #428]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	4a68      	ldr	r2, [pc, #416]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	4b68      	ldr	r3, [pc, #416]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d013      	beq.n	8000dbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d94:	f7ff fc74 	bl	8000680 <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d9c:	f7ff fc70 	bl	8000680 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b64      	cmp	r3, #100	; 0x64
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e1fa      	b.n	80011a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dae:	4b5d      	ldr	r3, [pc, #372]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f0      	beq.n	8000d9c <HAL_RCC_OscConfig+0xe4>
 8000dba:	e014      	b.n	8000de6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbc:	f7ff fc60 	bl	8000680 <HAL_GetTick>
 8000dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dc4:	f7ff fc5c 	bl	8000680 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b64      	cmp	r3, #100	; 0x64
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e1e6      	b.n	80011a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd6:	4b53      	ldr	r3, [pc, #332]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f0      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x10c>
 8000de2:	e000      	b.n	8000de6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d063      	beq.n	8000eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000df2:	4b4c      	ldr	r3, [pc, #304]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 030c 	and.w	r3, r3, #12
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00b      	beq.n	8000e16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dfe:	4b49      	ldr	r3, [pc, #292]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 030c 	and.w	r3, r3, #12
 8000e06:	2b08      	cmp	r3, #8
 8000e08:	d11c      	bne.n	8000e44 <HAL_RCC_OscConfig+0x18c>
 8000e0a:	4b46      	ldr	r3, [pc, #280]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d116      	bne.n	8000e44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e16:	4b43      	ldr	r3, [pc, #268]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d005      	beq.n	8000e2e <HAL_RCC_OscConfig+0x176>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	691b      	ldr	r3, [r3, #16]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d001      	beq.n	8000e2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e1ba      	b.n	80011a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2e:	493d      	ldr	r1, [pc, #244]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e42:	e03a      	b.n	8000eba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d020      	beq.n	8000e8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e4c:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <HAL_RCC_OscConfig+0x270>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e52:	f7ff fc15 	bl	8000680 <HAL_GetTick>
 8000e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e58:	e008      	b.n	8000e6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e5a:	f7ff fc11 	bl	8000680 <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e19b      	b.n	80011a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0f0      	beq.n	8000e5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e78:	492a      	ldr	r1, [pc, #168]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	600b      	str	r3, [r1, #0]
 8000e8c:	e015      	b.n	8000eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e8e:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <HAL_RCC_OscConfig+0x270>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff fbf4 	bl	8000680 <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e9c:	f7ff fbf0 	bl	8000680 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e17a      	b.n	80011a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eae:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1f0      	bne.n	8000e9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d03a      	beq.n	8000f3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d019      	beq.n	8000f02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_RCC_OscConfig+0x274>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed4:	f7ff fbd4 	bl	8000680 <HAL_GetTick>
 8000ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000edc:	f7ff fbd0 	bl	8000680 <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e15a      	b.n	80011a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f0      	beq.n	8000edc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f000 fada 	bl	80014b4 <RCC_Delay>
 8000f00:	e01c      	b.n	8000f3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_RCC_OscConfig+0x274>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f08:	f7ff fbba 	bl	8000680 <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0e:	e00f      	b.n	8000f30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f10:	f7ff fbb6 	bl	8000680 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d908      	bls.n	8000f30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e140      	b.n	80011a4 <HAL_RCC_OscConfig+0x4ec>
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000
 8000f28:	42420000 	.word	0x42420000
 8000f2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f30:	4b9e      	ldr	r3, [pc, #632]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 8000f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1e9      	bne.n	8000f10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 80a6 	beq.w	8001096 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f4e:	4b97      	ldr	r3, [pc, #604]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d10d      	bne.n	8000f76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	4a94      	ldr	r2, [pc, #592]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 8000f5c:	4b93      	ldr	r3, [pc, #588]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b91      	ldr	r3, [pc, #580]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f72:	2301      	movs	r3, #1
 8000f74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f76:	4b8e      	ldr	r3, [pc, #568]	; (80011b0 <HAL_RCC_OscConfig+0x4f8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d118      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f82:	4a8b      	ldr	r2, [pc, #556]	; (80011b0 <HAL_RCC_OscConfig+0x4f8>)
 8000f84:	4b8a      	ldr	r3, [pc, #552]	; (80011b0 <HAL_RCC_OscConfig+0x4f8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f8e:	f7ff fb77 	bl	8000680 <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f96:	f7ff fb73 	bl	8000680 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b64      	cmp	r3, #100	; 0x64
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e0fd      	b.n	80011a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa8:	4b81      	ldr	r3, [pc, #516]	; (80011b0 <HAL_RCC_OscConfig+0x4f8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0f0      	beq.n	8000f96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d106      	bne.n	8000fca <HAL_RCC_OscConfig+0x312>
 8000fbc:	4a7b      	ldr	r2, [pc, #492]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 8000fbe:	4b7b      	ldr	r3, [pc, #492]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6213      	str	r3, [r2, #32]
 8000fc8:	e02d      	b.n	8001026 <HAL_RCC_OscConfig+0x36e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10c      	bne.n	8000fec <HAL_RCC_OscConfig+0x334>
 8000fd2:	4a76      	ldr	r2, [pc, #472]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 8000fd4:	4b75      	ldr	r3, [pc, #468]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	f023 0301 	bic.w	r3, r3, #1
 8000fdc:	6213      	str	r3, [r2, #32]
 8000fde:	4a73      	ldr	r2, [pc, #460]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 8000fe0:	4b72      	ldr	r3, [pc, #456]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	f023 0304 	bic.w	r3, r3, #4
 8000fe8:	6213      	str	r3, [r2, #32]
 8000fea:	e01c      	b.n	8001026 <HAL_RCC_OscConfig+0x36e>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	d10c      	bne.n	800100e <HAL_RCC_OscConfig+0x356>
 8000ff4:	4a6d      	ldr	r2, [pc, #436]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 8000ff6:	4b6d      	ldr	r3, [pc, #436]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	f043 0304 	orr.w	r3, r3, #4
 8000ffe:	6213      	str	r3, [r2, #32]
 8001000:	4a6a      	ldr	r2, [pc, #424]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 8001002:	4b6a      	ldr	r3, [pc, #424]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6213      	str	r3, [r2, #32]
 800100c:	e00b      	b.n	8001026 <HAL_RCC_OscConfig+0x36e>
 800100e:	4a67      	ldr	r2, [pc, #412]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 8001010:	4b66      	ldr	r3, [pc, #408]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	f023 0301 	bic.w	r3, r3, #1
 8001018:	6213      	str	r3, [r2, #32]
 800101a:	4a64      	ldr	r2, [pc, #400]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 800101c:	4b63      	ldr	r3, [pc, #396]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	f023 0304 	bic.w	r3, r3, #4
 8001024:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d015      	beq.n	800105a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800102e:	f7ff fb27 	bl	8000680 <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001034:	e00a      	b.n	800104c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001036:	f7ff fb23 	bl	8000680 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	f241 3288 	movw	r2, #5000	; 0x1388
 8001044:	4293      	cmp	r3, r2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e0ab      	b.n	80011a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800104c:	4b57      	ldr	r3, [pc, #348]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0ee      	beq.n	8001036 <HAL_RCC_OscConfig+0x37e>
 8001058:	e014      	b.n	8001084 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105a:	f7ff fb11 	bl	8000680 <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001060:	e00a      	b.n	8001078 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001062:	f7ff fb0d 	bl	8000680 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001070:	4293      	cmp	r3, r2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e095      	b.n	80011a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001078:	4b4c      	ldr	r3, [pc, #304]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1ee      	bne.n	8001062 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001084:	7dfb      	ldrb	r3, [r7, #23]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d105      	bne.n	8001096 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800108a:	4a48      	ldr	r2, [pc, #288]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 800108c:	4b47      	ldr	r3, [pc, #284]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 800108e:	69db      	ldr	r3, [r3, #28]
 8001090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001094:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 8081 	beq.w	80011a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010a0:	4b42      	ldr	r3, [pc, #264]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 030c 	and.w	r3, r3, #12
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d061      	beq.n	8001170 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69db      	ldr	r3, [r3, #28]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d146      	bne.n	8001142 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010b4:	4b3f      	ldr	r3, [pc, #252]	; (80011b4 <HAL_RCC_OscConfig+0x4fc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ba:	f7ff fae1 	bl	8000680 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010c2:	f7ff fadd 	bl	8000680 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e067      	b.n	80011a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d4:	4b35      	ldr	r3, [pc, #212]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1f0      	bne.n	80010c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e8:	d108      	bne.n	80010fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010ea:	4930      	ldr	r1, [pc, #192]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 80010ec:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010fc:	482b      	ldr	r0, [pc, #172]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 80010fe:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a19      	ldr	r1, [r3, #32]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110e:	430b      	orrs	r3, r1
 8001110:	4313      	orrs	r3, r2
 8001112:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001114:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <HAL_RCC_OscConfig+0x4fc>)
 8001116:	2201      	movs	r2, #1
 8001118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111a:	f7ff fab1 	bl	8000680 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001122:	f7ff faad 	bl	8000680 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e037      	b.n	80011a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0f0      	beq.n	8001122 <HAL_RCC_OscConfig+0x46a>
 8001140:	e02f      	b.n	80011a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HAL_RCC_OscConfig+0x4fc>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fa9a 	bl	8000680 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001150:	f7ff fa96 	bl	8000680 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e020      	b.n	80011a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x498>
 800116e:	e018      	b.n	80011a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69db      	ldr	r3, [r3, #28]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d101      	bne.n	800117c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e013      	b.n	80011a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_RCC_OscConfig+0x4f4>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	429a      	cmp	r2, r3
 800118e:	d106      	bne.n	800119e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800119a:	429a      	cmp	r2, r3
 800119c:	d001      	beq.n	80011a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40007000 	.word	0x40007000
 80011b4:	42420060 	.word	0x42420060

080011b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e0d0      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011cc:	4b6a      	ldr	r3, [pc, #424]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0207 	and.w	r2, r3, #7
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d210      	bcs.n	80011fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011da:	4967      	ldr	r1, [pc, #412]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	4b66      	ldr	r3, [pc, #408]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f023 0207 	bic.w	r2, r3, #7
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ea:	4b63      	ldr	r3, [pc, #396]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0207 	and.w	r2, r3, #7
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d001      	beq.n	80011fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e0b8      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d020      	beq.n	800124a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001214:	4a59      	ldr	r2, [pc, #356]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	4b59      	ldr	r3, [pc, #356]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800121e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800122c:	4a53      	ldr	r2, [pc, #332]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 800122e:	4b53      	ldr	r3, [pc, #332]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001236:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001238:	4950      	ldr	r1, [pc, #320]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	4b50      	ldr	r3, [pc, #320]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	4313      	orrs	r3, r2
 8001248:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d040      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d107      	bne.n	800126e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	4b47      	ldr	r3, [pc, #284]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d115      	bne.n	8001296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e07f      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d107      	bne.n	8001286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001276:	4b41      	ldr	r3, [pc, #260]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d109      	bne.n	8001296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e073      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001286:	4b3d      	ldr	r3, [pc, #244]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e06b      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001296:	4939      	ldr	r1, [pc, #228]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	4b38      	ldr	r3, [pc, #224]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f023 0203 	bic.w	r2, r3, #3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012a8:	f7ff f9ea 	bl	8000680 <HAL_GetTick>
 80012ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ae:	e00a      	b.n	80012c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b0:	f7ff f9e6 	bl	8000680 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80012be:	4293      	cmp	r3, r2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e053      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c6:	4b2d      	ldr	r3, [pc, #180]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 020c 	and.w	r2, r3, #12
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d1eb      	bne.n	80012b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012d8:	4b27      	ldr	r3, [pc, #156]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0207 	and.w	r2, r3, #7
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d910      	bls.n	8001308 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e6:	4924      	ldr	r1, [pc, #144]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80012e8:	4b23      	ldr	r3, [pc, #140]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f023 0207 	bic.w	r2, r3, #7
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0207 	and.w	r2, r3, #7
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d001      	beq.n	8001308 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e032      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	d008      	beq.n	8001326 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001314:	4919      	ldr	r1, [pc, #100]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d009      	beq.n	8001346 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001332:	4912      	ldr	r1, [pc, #72]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4313      	orrs	r3, r2
 8001344:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001346:	f000 f821 	bl	800138c <HAL_RCC_GetSysClockFreq>
 800134a:	4601      	mov	r1, r0
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	091b      	lsrs	r3, r3, #4
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 8001358:	5cd3      	ldrb	r3, [r2, r3]
 800135a:	fa21 f303 	lsr.w	r3, r1, r3
 800135e:	4a09      	ldr	r2, [pc, #36]	; (8001384 <HAL_RCC_ClockConfig+0x1cc>)
 8001360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_RCC_ClockConfig+0x1d0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f948 	bl	80005fc <HAL_InitTick>

  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40022000 	.word	0x40022000
 800137c:	40021000 	.word	0x40021000
 8001380:	080024a0 	.word	0x080024a0
 8001384:	20000000 	.word	0x20000000
 8001388:	20000004 	.word	0x20000004

0800138c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800138c:	b490      	push	{r4, r7}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001392:	4b2a      	ldr	r3, [pc, #168]	; (800143c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001394:	1d3c      	adds	r4, r7, #4
 8001396:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001398:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <HAL_RCC_GetSysClockFreq+0xb4>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013b6:	4b23      	ldr	r3, [pc, #140]	; (8001444 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d002      	beq.n	80013cc <HAL_RCC_GetSysClockFreq+0x40>
 80013c6:	2b08      	cmp	r3, #8
 80013c8:	d003      	beq.n	80013d2 <HAL_RCC_GetSysClockFreq+0x46>
 80013ca:	e02d      	b.n	8001428 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013ce:	623b      	str	r3, [r7, #32]
      break;
 80013d0:	e02d      	b.n	800142e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	0c9b      	lsrs	r3, r3, #18
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013de:	4413      	add	r3, r2
 80013e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d013      	beq.n	8001418 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	0c5b      	lsrs	r3, r3, #17
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013fe:	4413      	add	r3, r2
 8001400:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001404:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <HAL_RCC_GetSysClockFreq+0xbc>)
 800140a:	fb02 f203 	mul.w	r2, r2, r3
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	fbb2 f3f3 	udiv	r3, r2, r3
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
 8001416:	e004      	b.n	8001422 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	4a0c      	ldr	r2, [pc, #48]	; (800144c <HAL_RCC_GetSysClockFreq+0xc0>)
 800141c:	fb02 f303 	mul.w	r3, r2, r3
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	623b      	str	r3, [r7, #32]
      break;
 8001426:	e002      	b.n	800142e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <HAL_RCC_GetSysClockFreq+0xbc>)
 800142a:	623b      	str	r3, [r7, #32]
      break;
 800142c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800142e:	6a3b      	ldr	r3, [r7, #32]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3728      	adds	r7, #40	; 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bc90      	pop	{r4, r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	08002440 	.word	0x08002440
 8001440:	08002450 	.word	0x08002450
 8001444:	40021000 	.word	0x40021000
 8001448:	007a1200 	.word	0x007a1200
 800144c:	003d0900 	.word	0x003d0900

08001450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001454:	4b02      	ldr	r3, [pc, #8]	; (8001460 <HAL_RCC_GetHCLKFreq+0x10>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	20000000 	.word	0x20000000

08001464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001468:	f7ff fff2 	bl	8001450 <HAL_RCC_GetHCLKFreq>
 800146c:	4601      	mov	r1, r0
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	0a1b      	lsrs	r3, r3, #8
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	4a03      	ldr	r2, [pc, #12]	; (8001488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800147a:	5cd3      	ldrb	r3, [r2, r3]
 800147c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001480:	4618      	mov	r0, r3
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40021000 	.word	0x40021000
 8001488:	080024b0 	.word	0x080024b0

0800148c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001490:	f7ff ffde 	bl	8001450 <HAL_RCC_GetHCLKFreq>
 8001494:	4601      	mov	r1, r0
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	0adb      	lsrs	r3, r3, #11
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	4a03      	ldr	r2, [pc, #12]	; (80014b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014a2:	5cd3      	ldrb	r3, [r2, r3]
 80014a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021000 	.word	0x40021000
 80014b0:	080024b0 	.word	0x080024b0

080014b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <RCC_Delay+0x34>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <RCC_Delay+0x38>)
 80014c2:	fba2 2303 	umull	r2, r3, r2, r3
 80014c6:	0a5b      	lsrs	r3, r3, #9
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	fb02 f303 	mul.w	r3, r2, r3
 80014ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014d0:	bf00      	nop
  }
  while (Delay --);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1e5a      	subs	r2, r3, #1
 80014d6:	60fa      	str	r2, [r7, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f9      	bne.n	80014d0 <RCC_Delay+0x1c>
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000000 	.word	0x20000000
 80014ec:	10624dd3 	.word	0x10624dd3

080014f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e03f      	b.n	8001582 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d106      	bne.n	800151c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff f806 	bl	8000528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2224      	movs	r2, #36	; 0x24
 8001520:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	68d2      	ldr	r2, [r2, #12]
 800152e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001532:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 fae5 	bl	8001b04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	6912      	ldr	r2, [r2, #16]
 8001544:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001548:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	6952      	ldr	r2, [r2, #20]
 8001554:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001558:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	68d2      	ldr	r2, [r2, #12]
 8001564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001568:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2220      	movs	r2, #32
 8001574:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2220      	movs	r2, #32
 800157c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800158a:	b480      	push	{r7}
 800158c:	b085      	sub	sp, #20
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	4613      	mov	r3, r2
 8001596:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b20      	cmp	r3, #32
 80015a2:	d130      	bne.n	8001606 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d002      	beq.n	80015b0 <HAL_UART_Transmit_IT+0x26>
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e029      	b.n	8001608 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_UART_Transmit_IT+0x38>
 80015be:	2302      	movs	r3, #2
 80015c0:	e022      	b.n	8001608 <HAL_UART_Transmit_IT+0x7e>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	68ba      	ldr	r2, [r7, #8]
 80015ce:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	88fa      	ldrh	r2, [r7, #6]
 80015d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	88fa      	ldrh	r2, [r7, #6]
 80015da:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2221      	movs	r2, #33	; 0x21
 80015e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	68d2      	ldr	r2, [r2, #12]
 80015fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001600:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	e000      	b.n	8001608 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001606:	2302      	movs	r3, #2
  }
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	4613      	mov	r3, r2
 800161e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b20      	cmp	r3, #32
 800162a:	d140      	bne.n	80016ae <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <HAL_UART_Receive_IT+0x26>
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e039      	b.n	80016b0 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <HAL_UART_Receive_IT+0x38>
 8001646:	2302      	movs	r3, #2
 8001648:	e032      	b.n	80016b0 <HAL_UART_Receive_IT+0x9e>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	68ba      	ldr	r2, [r7, #8]
 8001656:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	88fa      	ldrh	r2, [r7, #6]
 800165c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	88fa      	ldrh	r2, [r7, #6]
 8001662:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2222      	movs	r2, #34	; 0x22
 800166e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	68d2      	ldr	r2, [r2, #12]
 8001684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001688:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	6952      	ldr	r2, [r2, #20]
 8001694:	f042 0201 	orr.w	r2, r2, #1
 8001698:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	68d2      	ldr	r2, [r2, #12]
 80016a4:	f042 0220 	orr.w	r2, r2, #32
 80016a8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80016ae:	2302      	movs	r3, #2
  }
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
	...

080016bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80016dc:	2300      	movs	r3, #0
 80016de:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10d      	bne.n	800170e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	f003 0320 	and.w	r3, r3, #32
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <HAL_UART_IRQHandler+0x52>
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	f003 0320 	and.w	r3, r3, #32
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f97a 	bl	8001a00 <UART_Receive_IT>
      return;
 800170c:	e0cc      	b.n	80018a8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 80ab 	beq.w	800186c <HAL_UART_IRQHandler+0x1b0>
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d105      	bne.n	800172c <HAL_UART_IRQHandler+0x70>
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 80a0 	beq.w	800186c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00a      	beq.n	800174c <HAL_UART_IRQHandler+0x90>
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001744:	f043 0201 	orr.w	r2, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00a      	beq.n	800176c <HAL_UART_IRQHandler+0xb0>
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001764:	f043 0202 	orr.w	r2, r3, #2
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00a      	beq.n	800178c <HAL_UART_IRQHandler+0xd0>
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001784:	f043 0204 	orr.w	r2, r3, #4
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00a      	beq.n	80017ac <HAL_UART_IRQHandler+0xf0>
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a4:	f043 0208 	orr.w	r2, r3, #8
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d078      	beq.n	80018a6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f003 0320 	and.w	r3, r3, #32
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d007      	beq.n	80017ce <HAL_UART_IRQHandler+0x112>
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	f003 0320 	and.w	r3, r3, #32
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f919 	bl	8001a00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bf14      	ite	ne
 80017dc:	2301      	movne	r3, #1
 80017de:	2300      	moveq	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <HAL_UART_IRQHandler+0x13a>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d031      	beq.n	800185a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f865 	bl	80018c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001806:	2b00      	cmp	r3, #0
 8001808:	d023      	beq.n	8001852 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	6952      	ldr	r2, [r2, #20]
 8001814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001818:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800181e:	2b00      	cmp	r3, #0
 8001820:	d013      	beq.n	800184a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001826:	4a22      	ldr	r2, [pc, #136]	; (80018b0 <HAL_UART_IRQHandler+0x1f4>)
 8001828:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff f83c 	bl	80008ac <HAL_DMA_Abort_IT>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d016      	beq.n	8001868 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001844:	4610      	mov	r0, r2
 8001846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001848:	e00e      	b.n	8001868 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f832 	bl	80018b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001850:	e00a      	b.n	8001868 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f82e 	bl	80018b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001858:	e006      	b.n	8001868 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f82a 	bl	80018b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001866:	e01e      	b.n	80018a6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001868:	bf00      	nop
    return;
 800186a:	e01c      	b.n	80018a6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	2b00      	cmp	r3, #0
 8001874:	d008      	beq.n	8001888 <HAL_UART_IRQHandler+0x1cc>
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 f851 	bl	8001928 <UART_Transmit_IT>
    return;
 8001886:	e00f      	b.n	80018a8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00a      	beq.n	80018a8 <HAL_UART_IRQHandler+0x1ec>
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f897 	bl	80019d0 <UART_EndTransmit_IT>
    return;
 80018a2:	bf00      	nop
 80018a4:	e000      	b.n	80018a8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80018a6:	bf00      	nop
  }
}
 80018a8:	3720      	adds	r7, #32
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	08001901 	.word	0x08001901

080018b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	68d2      	ldr	r2, [r2, #12]
 80018d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80018dc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	6952      	ldr	r2, [r2, #20]
 80018e8:	f022 0201 	bic.w	r2, r2, #1
 80018ec:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2220      	movs	r2, #32
 80018f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f7ff ffca 	bl	80018b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001920:	bf00      	nop
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b21      	cmp	r3, #33	; 0x21
 800193a:	d143      	bne.n	80019c4 <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001944:	d119      	bne.n	800197a <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	8812      	ldrh	r2, [r2, #0]
 8001954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001958:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d105      	bne.n	800196e <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	1c9a      	adds	r2, r3, #2
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	621a      	str	r2, [r3, #32]
 800196c:	e00e      	b.n	800198c <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	621a      	str	r2, [r3, #32]
 8001978:	e008      	b.n	800198c <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	1c58      	adds	r0, r3, #1
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	6208      	str	r0, [r1, #32]
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001990:	b29b      	uxth	r3, r3
 8001992:	3b01      	subs	r3, #1
 8001994:	b29b      	uxth	r3, r3
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	4619      	mov	r1, r3
 800199a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10f      	bne.n	80019c0 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	68d2      	ldr	r2, [r2, #12]
 80019aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	68d2      	ldr	r2, [r2, #12]
 80019ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	e000      	b.n	80019c6 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80019c4:	2302      	movs	r3, #2
  }
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	68d2      	ldr	r2, [r2, #12]
 80019e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 fc2f 	bl	8002254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b22      	cmp	r3, #34	; 0x22
 8001a12:	d171      	bne.n	8001af8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a1c:	d123      	bne.n	8001a66 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a22:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10e      	bne.n	8001a4a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	1c9a      	adds	r2, r3, #2
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	629a      	str	r2, [r3, #40]	; 0x28
 8001a48:	e029      	b.n	8001a9e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28
 8001a64:	e01b      	b.n	8001a9e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10a      	bne.n	8001a84 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	1c59      	adds	r1, r3, #1
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6291      	str	r1, [r2, #40]	; 0x28
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	6852      	ldr	r2, [r2, #4]
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]
 8001a82:	e00c      	b.n	8001a9e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	1c59      	adds	r1, r3, #1
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6291      	str	r1, [r2, #40]	; 0x28
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6812      	ldr	r2, [r2, #0]
 8001a92:	6852      	ldr	r2, [r2, #4]
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d120      	bne.n	8001af4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	68d2      	ldr	r2, [r2, #12]
 8001abc:	f022 0220 	bic.w	r2, r2, #32
 8001ac0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	68d2      	ldr	r2, [r2, #12]
 8001acc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ad0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	6952      	ldr	r2, [r2, #20]
 8001adc:	f022 0201 	bic.w	r2, r2, #1
 8001ae0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 fbfe 	bl	80022ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	e002      	b.n	8001afa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	e000      	b.n	8001afa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001af8:	2302      	movs	r3, #2
  }
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b04:	b590      	push	{r4, r7, lr}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	6912      	ldr	r2, [r2, #16]
 8001b16:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68d2      	ldr	r2, [r2, #12]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001b42:	f023 030c 	bic.w	r3, r3, #12
 8001b46:	68f9      	ldr	r1, [r7, #12]
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	6952      	ldr	r2, [r2, #20]
 8001b56:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6992      	ldr	r2, [r2, #24]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a52      	ldr	r2, [pc, #328]	; (8001cb0 <UART_SetConfig+0x1ac>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d14e      	bne.n	8001c0a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001b6c:	f7ff fc8e 	bl	800148c <HAL_RCC_GetPCLK2Freq>
 8001b70:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6819      	ldr	r1, [r3, #0]
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009a      	lsls	r2, r3, #2
 8001b80:	441a      	add	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8c:	4a49      	ldr	r2, [pc, #292]	; (8001cb4 <UART_SetConfig+0x1b0>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	0118      	lsls	r0, r3, #4
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009a      	lsls	r2, r3, #2
 8001ba0:	441a      	add	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bac:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <UART_SetConfig+0x1b0>)
 8001bae:	fba3 4302 	umull	r4, r3, r3, r2
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2464      	movs	r4, #100	; 0x64
 8001bb6:	fb04 f303 	mul.w	r3, r4, r3
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	3332      	adds	r3, #50	; 0x32
 8001bc0:	4a3c      	ldr	r2, [pc, #240]	; (8001cb4 <UART_SetConfig+0x1b0>)
 8001bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bcc:	4418      	add	r0, r3
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009a      	lsls	r2, r3, #2
 8001bd8:	441a      	add	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001be4:	4b33      	ldr	r3, [pc, #204]	; (8001cb4 <UART_SetConfig+0x1b0>)
 8001be6:	fba3 4302 	umull	r4, r3, r3, r2
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	2464      	movs	r4, #100	; 0x64
 8001bee:	fb04 f303 	mul.w	r3, r4, r3
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	3332      	adds	r3, #50	; 0x32
 8001bf8:	4a2e      	ldr	r2, [pc, #184]	; (8001cb4 <UART_SetConfig+0x1b0>)
 8001bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	f003 030f 	and.w	r3, r3, #15
 8001c04:	4403      	add	r3, r0
 8001c06:	608b      	str	r3, [r1, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001c08:	e04d      	b.n	8001ca6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c0a:	f7ff fc2b 	bl	8001464 <HAL_RCC_GetPCLK1Freq>
 8001c0e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6819      	ldr	r1, [r3, #0]
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009a      	lsls	r2, r3, #2
 8001c1e:	441a      	add	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	4a22      	ldr	r2, [pc, #136]	; (8001cb4 <UART_SetConfig+0x1b0>)
 8001c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c30:	095b      	lsrs	r3, r3, #5
 8001c32:	0118      	lsls	r0, r3, #4
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009a      	lsls	r2, r3, #2
 8001c3e:	441a      	add	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <UART_SetConfig+0x1b0>)
 8001c4c:	fba3 4302 	umull	r4, r3, r3, r2
 8001c50:	095b      	lsrs	r3, r3, #5
 8001c52:	2464      	movs	r4, #100	; 0x64
 8001c54:	fb04 f303 	mul.w	r3, r4, r3
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	011b      	lsls	r3, r3, #4
 8001c5c:	3332      	adds	r3, #50	; 0x32
 8001c5e:	4a15      	ldr	r2, [pc, #84]	; (8001cb4 <UART_SetConfig+0x1b0>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	095b      	lsrs	r3, r3, #5
 8001c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c6a:	4418      	add	r0, r3
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	009a      	lsls	r2, r3, #2
 8001c76:	441a      	add	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c82:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <UART_SetConfig+0x1b0>)
 8001c84:	fba3 4302 	umull	r4, r3, r3, r2
 8001c88:	095b      	lsrs	r3, r3, #5
 8001c8a:	2464      	movs	r4, #100	; 0x64
 8001c8c:	fb04 f303 	mul.w	r3, r4, r3
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	3332      	adds	r3, #50	; 0x32
 8001c96:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <UART_SetConfig+0x1b0>)
 8001c98:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9c:	095b      	lsrs	r3, r3, #5
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	4403      	add	r3, r0
 8001ca4:	608b      	str	r3, [r1, #8]
}
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd90      	pop	{r4, r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40013800 	.word	0x40013800
 8001cb4:	51eb851f 	.word	0x51eb851f

08001cb8 <assert_failed>:
    }

#else
    // empty function !
    void assert_failed(uint8_t * file, uint32_t line) 
    {
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
        (void)file;
        (void)line;
    }
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <_2nd_complement>:
 * @param num 
 */
static void _2nd_complement(int32_t* num);


static void _2nd_complement(int32_t* num) {
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	int32_t temp = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
	temp = (~(*num) + 1); 
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	425b      	negs	r3, r3
 8001cde:	60fb      	str	r3, [r7, #12]
	*num = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	601a      	str	r2, [r3, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <num2str>:


uint8_t num2str(int32_t num_in, uint8_t *const pStr_out) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	77fb      	strb	r3, [r7, #31]
	uint8_t i2 = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	77bb      	strb	r3, [r7, #30]
	uint8_t num_cnt = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	777b      	strb	r3, [r7, #29]
	uint8_t sign_offset = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	773b      	strb	r3, [r7, #28]
	uint8_t temp_str[15];
	
	if (num_in == 0){
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d109      	bne.n	8001d24 <num2str+0x34>
		pStr_out[0] = '0';
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2230      	movs	r2, #48	; 0x30
 8001d14:	701a      	strb	r2, [r3, #0]
		pStr_out[1] = 0; // zero termination
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
        num_cnt = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	777b      	strb	r3, [r7, #29]
 8001d22:	e053      	b.n	8001dcc <num2str+0xdc>
	} else {

		if (num_in < 0)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	da08      	bge.n	8001d3c <num2str+0x4c>
		{
			pStr_out[0] = '-';
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	222d      	movs	r2, #45	; 0x2d
 8001d2e:	701a      	strb	r2, [r3, #0]
			sign_offset = 1;
 8001d30:	2301      	movs	r3, #1
 8001d32:	773b      	strb	r3, [r7, #28]
			_2nd_complement(&num_in);
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ffc8 	bl	8001ccc <_2nd_complement>
		}
		for (i = 0; num_in > 0; i++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	77fb      	strb	r3, [r7, #31]
 8001d40:	e01f      	b.n	8001d82 <num2str+0x92>
		{
            /* @todo try to replace % operator (assumsion is that this is slow on 8bit) */
			temp_str[i] = (uint8_t)((num_in % 10) + '0'); // ascii shift for numbers 0 -> 48(dec)
 8001d42:	7ff8      	ldrb	r0, [r7, #31]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <num2str+0xec>)
 8001d48:	fb83 1302 	smull	r1, r3, r3, r2
 8001d4c:	1099      	asrs	r1, r3, #2
 8001d4e:	17d3      	asrs	r3, r2, #31
 8001d50:	1ac9      	subs	r1, r1, r3
 8001d52:	460b      	mov	r3, r1
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	1ad1      	subs	r1, r2, r3
 8001d5c:	b2cb      	uxtb	r3, r1
 8001d5e:	3330      	adds	r3, #48	; 0x30
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	f107 0320 	add.w	r3, r7, #32
 8001d66:	4403      	add	r3, r0
 8001d68:	f803 2c14 	strb.w	r2, [r3, #-20]
			num_in = num_in / 10;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a1b      	ldr	r2, [pc, #108]	; (8001ddc <num2str+0xec>)
 8001d70:	fb82 1203 	smull	r1, r2, r2, r3
 8001d74:	1092      	asrs	r2, r2, #2
 8001d76:	17db      	asrs	r3, r3, #31
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	607b      	str	r3, [r7, #4]
		for (i = 0; num_in > 0; i++)
 8001d7c:	7ffb      	ldrb	r3, [r7, #31]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	77fb      	strb	r3, [r7, #31]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	dcdc      	bgt.n	8001d42 <num2str+0x52>
		}
		num_cnt = i;
 8001d88:	7ffb      	ldrb	r3, [r7, #31]
 8001d8a:	777b      	strb	r3, [r7, #29]
		i += sign_offset;
 8001d8c:	7ffa      	ldrb	r2, [r7, #31]
 8001d8e:	7f3b      	ldrb	r3, [r7, #28]
 8001d90:	4413      	add	r3, r2
 8001d92:	77fb      	strb	r3, [r7, #31]
		// add null termination at the end of string
		pStr_out[i] = 0;
 8001d94:	7ffb      	ldrb	r3, [r7, #31]
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	4413      	add	r3, r2
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
		// revers array
		for (i2 = 0; i2 < num_cnt; i2++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	77bb      	strb	r3, [r7, #30]
 8001da2:	e00f      	b.n	8001dc4 <num2str+0xd4>
		{
			i--;
 8001da4:	7ffb      	ldrb	r3, [r7, #31]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	77fb      	strb	r3, [r7, #31]
			pStr_out[i] = temp_str[i2];
 8001daa:	7ffb      	ldrb	r3, [r7, #31]
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	7fba      	ldrb	r2, [r7, #30]
 8001db2:	f107 0120 	add.w	r1, r7, #32
 8001db6:	440a      	add	r2, r1
 8001db8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001dbc:	701a      	strb	r2, [r3, #0]
		for (i2 = 0; i2 < num_cnt; i2++)
 8001dbe:	7fbb      	ldrb	r3, [r7, #30]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	77bb      	strb	r3, [r7, #30]
 8001dc4:	7fba      	ldrb	r2, [r7, #30]
 8001dc6:	7f7b      	ldrb	r3, [r7, #29]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d3eb      	bcc.n	8001da4 <num2str+0xb4>
		}
	}

    /* return string size */
	return (uint8_t)(num_cnt + sign_offset);
 8001dcc:	7f7a      	ldrb	r2, [r7, #29]
 8001dce:	7f3b      	ldrb	r3, [r7, #28]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	b2db      	uxtb	r3, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	66666667 	.word	0x66666667

08001de0 <RingBuff_init>:
    &flush_method
};

/* constructor */
void RingBuff_init(ringBuff_t *pThis, ringBuff_data_t *pData, size_t dataSize)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
    uint16_t loop_itr = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	82fb      	strh	r3, [r7, #22]

    pThis->_head = 0x00;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	801a      	strh	r2, [r3, #0]
    pThis->_tail = 0x00;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	805a      	strh	r2, [r3, #2]
    pThis->_pData = pData;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	605a      	str	r2, [r3, #4]
    pThis->_dataSize = dataSize;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	811a      	strh	r2, [r3, #8]
    /* initialize ring buffer to 0 */
    for (loop_itr = 0; loop_itr < dataSize; ++loop_itr)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	82fb      	strh	r3, [r7, #22]
 8001e0e:	e008      	b.n	8001e22 <RingBuff_init+0x42>
    {
        pThis->_pData[loop_itr] = 0x00; 
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	8afb      	ldrh	r3, [r7, #22]
 8001e16:	4413      	add	r3, r2
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
    for (loop_itr = 0; loop_itr < dataSize; ++loop_itr)
 8001e1c:	8afb      	ldrh	r3, [r7, #22]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	82fb      	strh	r3, [r7, #22]
 8001e22:	8afa      	ldrh	r2, [r7, #22]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d3f2      	bcc.n	8001e10 <RingBuff_init+0x30>
        //*(pThis->_pData + loop_itr) = 0x00;
    }
}
 8001e2a:	bf00      	nop
 8001e2c:	371c      	adds	r7, #28
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <push_method>:

//=====================================================================================
/* methods implementation */

static void push_method(ringBuff_t *pThis, ringBuff_data_t newData)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
    /* this "magic" make line buffer into ring buffer */
    uint16_t new_head = (pThis->_head + 1) & (pThis->_dataSize - 1); 
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	b21a      	sxth	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	891b      	ldrh	r3, [r3, #8]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	b21b      	sxth	r3, r3
 8001e54:	4013      	ands	r3, r2
 8001e56:	b21b      	sxth	r3, r3
 8001e58:	81fb      	strh	r3, [r7, #14]

    if(new_head != pThis->_tail)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	885b      	ldrh	r3, [r3, #2]
 8001e5e:	89fa      	ldrh	r2, [r7, #14]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d00a      	beq.n	8001e7a <push_method+0x46>
    {
        pThis->_pData[pThis->_head] = newData;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	8812      	ldrh	r2, [r2, #0]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	78fa      	ldrb	r2, [r7, #3]
 8001e70:	701a      	strb	r2, [r3, #0]
        pThis->_head = new_head;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	89fa      	ldrh	r2, [r7, #14]
 8001e76:	801a      	strh	r2, [r3, #0]
    else
    {
        // ERROR, can't override buffer
        assert(0);
    }  
}
 8001e78:	e003      	b.n	8001e82 <push_method+0x4e>
        assert(0);
 8001e7a:	2150      	movs	r1, #80	; 0x50
 8001e7c:	4803      	ldr	r0, [pc, #12]	; (8001e8c <push_method+0x58>)
 8001e7e:	f7ff ff1b 	bl	8001cb8 <assert_failed>
}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	08002454 	.word	0x08002454

08001e90 <get_method>:

static ringBuff_data_t get_method(ringBuff_t *pThis)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	ringBuff_data_t ret_value = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]

	if (pThis->_tail != pThis->_head)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	885a      	ldrh	r2, [r3, #2]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d016      	beq.n	8001ed6 <get_method+0x46>
	{
		ret_value = pThis->_pData[pThis->_tail];
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	8852      	ldrh	r2, [r2, #2]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	73fb      	strb	r3, [r7, #15]
        /* this "magic" make line buffer into ring buffer */
		pThis->_tail = (pThis->_tail + 1) & (pThis->_dataSize - 1); 
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	885b      	ldrh	r3, [r3, #2]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	b21a      	sxth	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	891b      	ldrh	r3, [r3, #8]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	b21b      	sxth	r3, r3
 8001eca:	4013      	ands	r3, r2
 8001ecc:	b21b      	sxth	r3, r3
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	805a      	strh	r2, [r3, #2]
 8001ed4:	e001      	b.n	8001eda <get_method+0x4a>
	} else {
		ret_value = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	73fb      	strb	r3, [r7, #15]
	}
	return ret_value;
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <get_nBytes_method>:

static uint16_t get_nBytes_method(ringBuff_t *pThis)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
	return((pThis->_head - pThis->_tail) & (pThis->_dataSize - 1));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	881a      	ldrh	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	885b      	ldrh	r3, [r3, #2]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	b21a      	sxth	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	891b      	ldrh	r3, [r3, #8]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	b21b      	sxth	r3, r3
 8001f06:	4013      	ands	r3, r2
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	b29b      	uxth	r3, r3
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr

08001f16 <flush_method>:

static void	flush_method(ringBuff_t *pThis){
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
	pThis->_head = pThis->_tail;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	885a      	ldrh	r2, [r3, #2]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	801a      	strh	r2, [r3, #0]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <Serial_init>:
    &readUntil,
    &isData,
    &flush
};

void Serial_init(serial_ctrl_desc_t *p_Serial_ctrl_desc, void *p_HW_handle) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]

    assert(p_Serial_ctrl_desc != NULL);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d103      	bne.n	8001f48 <Serial_init+0x18>
 8001f40:	2175      	movs	r1, #117	; 0x75
 8001f42:	4810      	ldr	r0, [pc, #64]	; (8001f84 <Serial_init+0x54>)
 8001f44:	f7ff feb8 	bl	8001cb8 <assert_failed>
    assert(p_HW_handle != NULL);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d103      	bne.n	8001f56 <Serial_init+0x26>
 8001f4e:	2176      	movs	r1, #118	; 0x76
 8001f50:	480c      	ldr	r0, [pc, #48]	; (8001f84 <Serial_init+0x54>)
 8001f52:	f7ff feb1 	bl	8001cb8 <assert_failed>

    RingBuff_init(p_Serial_ctrl_desc->p_xBuff_Tx, p_Serial_ctrl_desc->p_data_Tx, BUFF_0_TX_SIZE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6858      	ldr	r0, [r3, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2240      	movs	r2, #64	; 0x40
 8001f60:	4619      	mov	r1, r3
 8001f62:	f7ff ff3d 	bl	8001de0 <RingBuff_init>
    RingBuff_init(p_Serial_ctrl_desc->p_xBuff_Rx, p_Serial_ctrl_desc->p_data_Rx, BUFF_0_RX_SIZE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68d8      	ldr	r0, [r3, #12]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2240      	movs	r2, #64	; 0x40
 8001f70:	4619      	mov	r1, r3
 8001f72:	f7ff ff35 	bl	8001de0 <RingBuff_init>

    p_Serial_ctrl_desc->p_uartHW = (UART_HandleTypeDef*)p_HW_handle; // #todo :check if * is needed in casting ?
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	601a      	str	r2, [r3, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	08002488 	.word	0x08002488

08001f88 <print>:

void print(serial_ctrl_desc_t *p_ctrl_desc, const uint8_t * const pStr){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
    /* write to ring buffer and start send if not currently not active */
    uint_fast8_t i = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
    static uint_fast8_t byte2send;

    while (pStr[i] != 0x00) // const c-strings are '\0'(0x00) terminated 
 8001f96:	e00b      	b.n	8001fb0 <print+0x28>
    {
        // write to buffer
        RingBuff.push(p_ctrl_desc->p_xBuff_Tx, pStr[i++]);
 8001f98:	4b1c      	ldr	r3, [pc, #112]	; (800200c <print+0x84>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6858      	ldr	r0, [r3, #4]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1c59      	adds	r1, r3, #1
 8001fa4:	60f9      	str	r1, [r7, #12]
 8001fa6:	6839      	ldr	r1, [r7, #0]
 8001fa8:	440b      	add	r3, r1
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	4790      	blx	r2
    while (pStr[i] != 0x00) // const c-strings are '\0'(0x00) terminated 
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1ed      	bne.n	8001f98 <print+0x10>
    }
        
    if (p_ctrl_desc->bussy_F == 0)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	7d9b      	ldrb	r3, [r3, #22]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d11f      	bne.n	8002004 <print+0x7c>
    {
        // initiate send
        byte2send = RingBuff.get(p_ctrl_desc->p_xBuff_Tx);
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <print+0x84>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6852      	ldr	r2, [r2, #4]
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4798      	blx	r3
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <print+0x88>)
 8001fd6:	601a      	str	r2, [r3, #0]
        HAL_status = HAL_UART_Transmit_IT(p_ctrl_desc->p_uartHW, &byte2send, 1);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	490c      	ldr	r1, [pc, #48]	; (8002010 <print+0x88>)
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fad2 	bl	800158a <HAL_UART_Transmit_IT>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <print+0x8c>)
 8001fec:	701a      	strb	r2, [r3, #0]
        if (HAL_status != HAL_OK)
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <print+0x8c>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <print+0x76>
        {
            assert(0);
 8001ff6:	2190      	movs	r1, #144	; 0x90
 8001ff8:	4807      	ldr	r0, [pc, #28]	; (8002018 <print+0x90>)
 8001ffa:	f7ff fe5d 	bl	8001cb8 <assert_failed>
        }
        p_ctrl_desc->bussy_F = 1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	759a      	strb	r2, [r3, #22]
    }
}
 8002004:	bf00      	nop
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	080024b8 	.word	0x080024b8
 8002010:	200000d0 	.word	0x200000d0
 8002014:	200000cc 	.word	0x200000cc
 8002018:	08002488 	.word	0x08002488

0800201c <println>:

void println(serial_ctrl_desc_t *p_ctrl_desc, const uint8_t * const pStr){
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
    print(p_ctrl_desc, pStr);
 8002026:	6839      	ldr	r1, [r7, #0]
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ffad 	bl	8001f88 <print>
    print(p_ctrl_desc, "\n");
 800202e:	4904      	ldr	r1, [pc, #16]	; (8002040 <println+0x24>)
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ffa9 	bl	8001f88 <print>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	0800249c 	.word	0x0800249c

08002044 <write>:

void write(serial_ctrl_desc_t *p_ctrl_desc, uint8_t *const pSurce, size_t size){
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
    /* write to ring buffer and start send if not currently not active */
    uint_fast8_t i = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
    static uint_fast8_t byte2send;

    while (i < size) // const c-strings are '\0'(0x00) terminated 
 8002054:	e00b      	b.n	800206e <write+0x2a>
    {
        // write to buffer
        RingBuff.push(p_ctrl_desc->p_xBuff_Tx, pSurce[i++]);
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <write+0x84>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6858      	ldr	r0, [r3, #4]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	1c59      	adds	r1, r3, #1
 8002062:	6179      	str	r1, [r7, #20]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	440b      	add	r3, r1
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	4619      	mov	r1, r3
 800206c:	4790      	blx	r2
    while (i < size) // const c-strings are '\0'(0x00) terminated 
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	429a      	cmp	r2, r3
 8002074:	d3ef      	bcc.n	8002056 <write+0x12>
    }
        
    if (p_ctrl_desc->bussy_F == 0)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	7d9b      	ldrb	r3, [r3, #22]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d11f      	bne.n	80020be <write+0x7a>
    {
        // initiate send
        byte2send = RingBuff.get(p_ctrl_desc->p_xBuff_Tx);
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <write+0x84>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	6852      	ldr	r2, [r2, #4]
 8002086:	4610      	mov	r0, r2
 8002088:	4798      	blx	r3
 800208a:	4603      	mov	r3, r0
 800208c:	461a      	mov	r2, r3
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <write+0x88>)
 8002090:	601a      	str	r2, [r3, #0]
        HAL_status = HAL_UART_Transmit_IT(p_ctrl_desc->p_uartHW, &byte2send, 1);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2201      	movs	r2, #1
 8002098:	490c      	ldr	r1, [pc, #48]	; (80020cc <write+0x88>)
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fa75 	bl	800158a <HAL_UART_Transmit_IT>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <write+0x8c>)
 80020a6:	701a      	strb	r2, [r3, #0]
        if (HAL_status != HAL_OK)
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <write+0x8c>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <write+0x74>
        {
            assert(0);
 80020b0:	21ad      	movs	r1, #173	; 0xad
 80020b2:	4808      	ldr	r0, [pc, #32]	; (80020d4 <write+0x90>)
 80020b4:	f7ff fe00 	bl	8001cb8 <assert_failed>
        }
        p_ctrl_desc->bussy_F = 1;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	759a      	strb	r2, [r3, #22]
    }
}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	080024b8 	.word	0x080024b8
 80020cc:	200000d4 	.word	0x200000d4
 80020d0:	200000cc 	.word	0x200000cc
 80020d4:	08002488 	.word	0x08002488

080020d8 <isData>:


uint16_t isData (serial_ctrl_desc_t *p_ctrl_desc) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
    uint_fast16_t data_cnt = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
    data_cnt = RingBuff.get_nBytes(p_ctrl_desc->p_xBuff_Rx);
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <isData+0x28>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68d2      	ldr	r2, [r2, #12]
 80020ec:	4610      	mov	r0, r2
 80020ee:	4798      	blx	r3
 80020f0:	4603      	mov	r3, r0
 80020f2:	60fb      	str	r3, [r7, #12]
    return (data_cnt);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	b29b      	uxth	r3, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	080024b8 	.word	0x080024b8

08002104 <flush>:

void flush(serial_ctrl_desc_t *p_ctrl_desc) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
    RingBuff.flush(p_ctrl_desc->p_xBuff_Rx);
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <flush+0x1c>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68d2      	ldr	r2, [r2, #12]
 8002114:	4610      	mov	r0, r2
 8002116:	4798      	blx	r3
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	080024b8 	.word	0x080024b8

08002124 <read_enable>:

void read_enable(serial_ctrl_desc_t *p_ctrl_desc) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
    /* start read */
    if(p_ctrl_desc->Rx_active_F == 0) {
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	7d5b      	ldrb	r3, [r3, #21]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10a      	bne.n	800214a <read_enable+0x26>
        HAL_UART_Receive_IT(p_ctrl_desc->p_uartHW, &p_ctrl_desc->byteTemp_Rx, 1);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3314      	adds	r3, #20
 800213c:	2201      	movs	r2, #1
 800213e:	4619      	mov	r1, r3
 8002140:	f7ff fa67 	bl	8001612 <HAL_UART_Receive_IT>
        p_ctrl_desc->Rx_active_F = 1;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	755a      	strb	r2, [r3, #21]
    }
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <read>:



uint16_t read(serial_ctrl_desc_t *p_ctrl_desc, uint8_t *pDest, uint8_t nBytes) {
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	4613      	mov	r3, r2
 8002160:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	75fb      	strb	r3, [r7, #23]
    uint8_t byte_cnt = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	75bb      	strb	r3, [r7, #22]
    
    for (i = 0; i < nBytes; ++i)
 800216a:	2300      	movs	r3, #0
 800216c:	75fb      	strb	r3, [r7, #23]
 800216e:	e018      	b.n	80021a2 <read+0x4e>
    {
        byte_cnt = RingBuff.get_nBytes(p_ctrl_desc->p_xBuff_Rx);	
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <read+0x68>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	68d2      	ldr	r2, [r2, #12]
 8002178:	4610      	mov	r0, r2
 800217a:	4798      	blx	r3
 800217c:	4603      	mov	r3, r0
 800217e:	75bb      	strb	r3, [r7, #22]
        if(byte_cnt > 0) {
 8002180:	7dbb      	ldrb	r3, [r7, #22]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d012      	beq.n	80021ac <read+0x58>
            pDest[i] = RingBuff.get(p_ctrl_desc->p_xBuff_Rx);
 8002186:	7dfb      	ldrb	r3, [r7, #23]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	18d4      	adds	r4, r2, r3
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <read+0x68>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	68d2      	ldr	r2, [r2, #12]
 8002194:	4610      	mov	r0, r2
 8002196:	4798      	blx	r3
 8002198:	4603      	mov	r3, r0
 800219a:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < nBytes; ++i)
 800219c:	7dfb      	ldrb	r3, [r7, #23]
 800219e:	3301      	adds	r3, #1
 80021a0:	75fb      	strb	r3, [r7, #23]
 80021a2:	7dfa      	ldrb	r2, [r7, #23]
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d3e2      	bcc.n	8002170 <read+0x1c>
 80021aa:	e000      	b.n	80021ae <read+0x5a>
        }else {
            /* buffer empty */
            break;
 80021ac:	bf00      	nop
        }
    }
    return i;
 80021ae:	7dfb      	ldrb	r3, [r7, #23]
 80021b0:	b29b      	uxth	r3, r3
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	371c      	adds	r7, #28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd90      	pop	{r4, r7, pc}
 80021ba:	bf00      	nop
 80021bc:	080024b8 	.word	0x080024b8

080021c0 <readUntil>:

uint16_t readUntil(serial_ctrl_desc_t *p_ctrl_desc, uint8_t *pDest, uint8_t nBytes, uint8_t terminate_chr) {
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	4611      	mov	r1, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	460b      	mov	r3, r1
 80021d0:	71fb      	strb	r3, [r7, #7]
 80021d2:	4613      	mov	r3, r2
 80021d4:	71bb      	strb	r3, [r7, #6]
    uint8_t i = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	75fb      	strb	r3, [r7, #23]
    uint8_t byte_cnt = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	75bb      	strb	r3, [r7, #22]
    
    for (i = 0; i < nBytes; ++i)
 80021de:	2300      	movs	r3, #0
 80021e0:	75fb      	strb	r3, [r7, #23]
 80021e2:	e028      	b.n	8002236 <readUntil+0x76>
    {
        byte_cnt = RingBuff.get_nBytes(p_ctrl_desc->p_xBuff_Rx);	
 80021e4:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <readUntil+0x90>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	68d2      	ldr	r2, [r2, #12]
 80021ec:	4610      	mov	r0, r2
 80021ee:	4798      	blx	r3
 80021f0:	4603      	mov	r3, r0
 80021f2:	75bb      	strb	r3, [r7, #22]
        if(byte_cnt > 0) {
 80021f4:	7dbb      	ldrb	r3, [r7, #22]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d022      	beq.n	8002240 <readUntil+0x80>
            pDest[i] = RingBuff.get(p_ctrl_desc->p_xBuff_Rx);
 80021fa:	7dfb      	ldrb	r3, [r7, #23]
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	18d4      	adds	r4, r2, r3
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <readUntil+0x90>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	68d2      	ldr	r2, [r2, #12]
 8002208:	4610      	mov	r0, r2
 800220a:	4798      	blx	r3
 800220c:	4603      	mov	r3, r0
 800220e:	7023      	strb	r3, [r4, #0]
            if(pDest[i] == terminate_chr) {
 8002210:	7dfb      	ldrb	r3, [r7, #23]
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	4413      	add	r3, r2
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	79ba      	ldrb	r2, [r7, #6]
 800221a:	429a      	cmp	r2, r3
 800221c:	d108      	bne.n	8002230 <readUntil+0x70>
                /* replace termination character with 0x00 termination */
                pDest[i] = 0x00;
 800221e:	7dfb      	ldrb	r3, [r7, #23]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	4413      	add	r3, r2
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
                i--;
 8002228:	7dfb      	ldrb	r3, [r7, #23]
 800222a:	3b01      	subs	r3, #1
 800222c:	75fb      	strb	r3, [r7, #23]
                break;
 800222e:	e008      	b.n	8002242 <readUntil+0x82>
    for (i = 0; i < nBytes; ++i)
 8002230:	7dfb      	ldrb	r3, [r7, #23]
 8002232:	3301      	adds	r3, #1
 8002234:	75fb      	strb	r3, [r7, #23]
 8002236:	7dfa      	ldrb	r2, [r7, #23]
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	429a      	cmp	r2, r3
 800223c:	d3d2      	bcc.n	80021e4 <readUntil+0x24>
 800223e:	e000      	b.n	8002242 <readUntil+0x82>
            }
        }else {
            /* buffer empty */
            break;
 8002240:	bf00      	nop
        }
    }
    return i;
 8002242:	7dfb      	ldrb	r3, [r7, #23]
 8002244:	b29b      	uxth	r3, r3
}
 8002246:	4618      	mov	r0, r3
 8002248:	371c      	adds	r7, #28
 800224a:	46bd      	mov	sp, r7
 800224c:	bd90      	pop	{r4, r7, pc}
 800224e:	bf00      	nop
 8002250:	080024b8 	.word	0x080024b8

08002254 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
    /* this callback function could run ring buffer to handle multiple messages */ 
    serial_ctrl_desc_t *p_serial;
    static uint_fast8_t byte2send;

    if(serial_0_desc.p_uartHW == huart) {
 800225c:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <HAL_UART_TxCpltCallback+0x84>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	429a      	cmp	r2, r3
 8002264:	d101      	bne.n	800226a <HAL_UART_TxCpltCallback+0x16>
        p_serial = &serial_0_desc;
 8002266:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <HAL_UART_TxCpltCallback+0x84>)
 8002268:	60fb      	str	r3, [r7, #12]
        else if(serial_2_desc.p_uartHW == huart){
            p_serial = &serial_2_desc;
        }
    #endif

    assert(p_serial != NULL);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d104      	bne.n	800227a <HAL_UART_TxCpltCallback+0x26>
 8002270:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002274:	4819      	ldr	r0, [pc, #100]	; (80022dc <HAL_UART_TxCpltCallback+0x88>)
 8002276:	f7ff fd1f 	bl	8001cb8 <assert_failed>

    if(RingBuff.get_nBytes(p_serial->p_xBuff_Tx) > 0) {
 800227a:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <HAL_UART_TxCpltCallback+0x8c>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	6852      	ldr	r2, [r2, #4]
 8002282:	4610      	mov	r0, r2
 8002284:	4798      	blx	r3
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d01e      	beq.n	80022ca <HAL_UART_TxCpltCallback+0x76>

        byte2send = RingBuff.get(p_serial->p_xBuff_Tx);
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <HAL_UART_TxCpltCallback+0x8c>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	6852      	ldr	r2, [r2, #4]
 8002294:	4610      	mov	r0, r2
 8002296:	4798      	blx	r3
 8002298:	4603      	mov	r3, r0
 800229a:	461a      	mov	r2, r3
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_UART_TxCpltCallback+0x90>)
 800229e:	601a      	str	r2, [r3, #0]
        HAL_status = HAL_UART_Transmit_IT(p_serial->p_uartHW, &byte2send, 1);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2201      	movs	r2, #1
 80022a6:	490f      	ldr	r1, [pc, #60]	; (80022e4 <HAL_UART_TxCpltCallback+0x90>)
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff f96e 	bl	800158a <HAL_UART_Transmit_IT>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <HAL_UART_TxCpltCallback+0x94>)
 80022b4:	701a      	strb	r2, [r3, #0]
        if (HAL_status != HAL_OK)
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <HAL_UART_TxCpltCallback+0x94>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d008      	beq.n	80022d0 <HAL_UART_TxCpltCallback+0x7c>
        {
            assert(0);
 80022be:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80022c2:	4806      	ldr	r0, [pc, #24]	; (80022dc <HAL_UART_TxCpltCallback+0x88>)
 80022c4:	f7ff fcf8 	bl	8001cb8 <assert_failed>
        }
    }else {
        /* no more data to send */
        p_serial->bussy_F = 0;
    }
}
 80022c8:	e002      	b.n	80022d0 <HAL_UART_TxCpltCallback+0x7c>
        p_serial->bussy_F = 0;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	759a      	strb	r2, [r3, #22]
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	2000000c 	.word	0x2000000c
 80022dc:	08002488 	.word	0x08002488
 80022e0:	080024b8 	.word	0x080024b8
 80022e4:	200000d8 	.word	0x200000d8
 80022e8:	200000cc 	.word	0x200000cc

080022ec <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
    serial_ctrl_desc_t *p_serial;

    if(serial_0_desc.p_uartHW == huart) {
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_UART_RxCpltCallback+0x50>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d101      	bne.n	8002302 <HAL_UART_RxCpltCallback+0x16>
        p_serial = &serial_0_desc;
 80022fe:	4b0f      	ldr	r3, [pc, #60]	; (800233c <HAL_UART_RxCpltCallback+0x50>)
 8002300:	60fb      	str	r3, [r7, #12]
        else if(serial_2_desc.p_uartHW == huart){
            p_serial = &serial_2_desc;
        }
    #endif

    assert(p_serial != NULL);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d104      	bne.n	8002312 <HAL_UART_RxCpltCallback+0x26>
 8002308:	f44f 7193 	mov.w	r1, #294	; 0x126
 800230c:	480c      	ldr	r0, [pc, #48]	; (8002340 <HAL_UART_RxCpltCallback+0x54>)
 800230e:	f7ff fcd3 	bl	8001cb8 <assert_failed>
    /* save received byte into ringBuffer */
    RingBuff.push(p_serial->p_xBuff_Rx, p_serial->byteTemp_Rx);
 8002312:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <HAL_UART_RxCpltCallback+0x58>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	68d0      	ldr	r0, [r2, #12]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	7d12      	ldrb	r2, [r2, #20]
 800231e:	4611      	mov	r1, r2
 8002320:	4798      	blx	r3

    /* reenable Rx */
    HAL_UART_Receive_IT(p_serial->p_uartHW, &p_serial->byteTemp_Rx, 1);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	3314      	adds	r3, #20
 800232a:	2201      	movs	r2, #1
 800232c:	4619      	mov	r1, r3
 800232e:	f7ff f970 	bl	8001612 <HAL_UART_Receive_IT>
}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2000000c 	.word	0x2000000c
 8002340:	08002488 	.word	0x08002488
 8002344:	080024b8 	.word	0x080024b8

08002348 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002348:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800234a:	e003      	b.n	8002354 <LoopCopyDataInit>

0800234c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800234e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002350:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002352:	3104      	adds	r1, #4

08002354 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002354:	480a      	ldr	r0, [pc, #40]	; (8002380 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002358:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800235a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800235c:	d3f6      	bcc.n	800234c <CopyDataInit>
  ldr r2, =_sbss
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002360:	e002      	b.n	8002368 <LoopFillZerobss>

08002362 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002362:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002364:	f842 3b04 	str.w	r3, [r2], #4

08002368 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800236a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800236c:	d3f9      	bcc.n	8002362 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800236e:	f7fe f87d 	bl	800046c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002372:	f000 f80f 	bl	8002394 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002376:	f7fd ff31 	bl	80001dc <main>
  bx lr
 800237a:	4770      	bx	lr
  ldr r3, =_sidata
 800237c:	080024d0 	.word	0x080024d0
  ldr r0, =_sdata
 8002380:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002384:	20000044 	.word	0x20000044
  ldr r2, =_sbss
 8002388:	20000044 	.word	0x20000044
  ldr r3, = _ebss
 800238c:	200001b8 	.word	0x200001b8

08002390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002390:	e7fe      	b.n	8002390 <ADC1_2_IRQHandler>
	...

08002394 <__libc_init_array>:
 8002394:	b570      	push	{r4, r5, r6, lr}
 8002396:	2500      	movs	r5, #0
 8002398:	4e0c      	ldr	r6, [pc, #48]	; (80023cc <__libc_init_array+0x38>)
 800239a:	4c0d      	ldr	r4, [pc, #52]	; (80023d0 <__libc_init_array+0x3c>)
 800239c:	1ba4      	subs	r4, r4, r6
 800239e:	10a4      	asrs	r4, r4, #2
 80023a0:	42a5      	cmp	r5, r4
 80023a2:	d109      	bne.n	80023b8 <__libc_init_array+0x24>
 80023a4:	f000 f832 	bl	800240c <_init>
 80023a8:	2500      	movs	r5, #0
 80023aa:	4e0a      	ldr	r6, [pc, #40]	; (80023d4 <__libc_init_array+0x40>)
 80023ac:	4c0a      	ldr	r4, [pc, #40]	; (80023d8 <__libc_init_array+0x44>)
 80023ae:	1ba4      	subs	r4, r4, r6
 80023b0:	10a4      	asrs	r4, r4, #2
 80023b2:	42a5      	cmp	r5, r4
 80023b4:	d105      	bne.n	80023c2 <__libc_init_array+0x2e>
 80023b6:	bd70      	pop	{r4, r5, r6, pc}
 80023b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023bc:	4798      	blx	r3
 80023be:	3501      	adds	r5, #1
 80023c0:	e7ee      	b.n	80023a0 <__libc_init_array+0xc>
 80023c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023c6:	4798      	blx	r3
 80023c8:	3501      	adds	r5, #1
 80023ca:	e7f2      	b.n	80023b2 <__libc_init_array+0x1e>
 80023cc:	080024c8 	.word	0x080024c8
 80023d0:	080024c8 	.word	0x080024c8
 80023d4:	080024c8 	.word	0x080024c8
 80023d8:	080024cc 	.word	0x080024cc

080023dc <memset>:
 80023dc:	4603      	mov	r3, r0
 80023de:	4402      	add	r2, r0
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d100      	bne.n	80023e6 <memset+0xa>
 80023e4:	4770      	bx	lr
 80023e6:	f803 1b01 	strb.w	r1, [r3], #1
 80023ea:	e7f9      	b.n	80023e0 <memset+0x4>

080023ec <strcat>:
 80023ec:	4602      	mov	r2, r0
 80023ee:	b510      	push	{r4, lr}
 80023f0:	4613      	mov	r3, r2
 80023f2:	781c      	ldrb	r4, [r3, #0]
 80023f4:	3201      	adds	r2, #1
 80023f6:	2c00      	cmp	r4, #0
 80023f8:	d1fa      	bne.n	80023f0 <strcat+0x4>
 80023fa:	3b01      	subs	r3, #1
 80023fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002400:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002404:	2a00      	cmp	r2, #0
 8002406:	d1f9      	bne.n	80023fc <strcat+0x10>
 8002408:	bd10      	pop	{r4, pc}
	...

0800240c <_init>:
 800240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240e:	bf00      	nop
 8002410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002412:	bc08      	pop	{r3}
 8002414:	469e      	mov	lr, r3
 8002416:	4770      	bx	lr

08002418 <_fini>:
 8002418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241a:	bf00      	nop
 800241c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800241e:	bc08      	pop	{r3}
 8002420:	469e      	mov	lr, r3
 8002422:	4770      	bx	lr
