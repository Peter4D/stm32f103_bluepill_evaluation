
STM32F103_bluePil_evaluation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002344  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08002450  08002450  00012450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080024f4  080024f4  000124f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080024f8  080024f8  000124f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000004c  20000000  080024fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000170  2000004c  08002548  0002004c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001bc  08002548  000201bc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008a01  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001b04  00000000  00000000  00028a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000780  00000000  00000000  0002a580  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000678  00000000  00000000  0002ad00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003dc8  00000000  00000000  0002b378  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000259f  00000000  00000000  0002f140  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000316df  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001bc8  00000000  00000000  0003175c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000004c 	.word	0x2000004c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002438 	.word	0x08002438

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000050 	.word	0x20000050
 8000148:	08002438 	.word	0x08002438

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0308 	add.w	r3, r7, #8
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4a18      	ldr	r2, [pc, #96]	; (80001d4 <MX_GPIO_Init+0x78>)
 8000172:	4b18      	ldr	r3, [pc, #96]	; (80001d4 <MX_GPIO_Init+0x78>)
 8000174:	699b      	ldr	r3, [r3, #24]
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b15      	ldr	r3, [pc, #84]	; (80001d4 <MX_GPIO_Init+0x78>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	607b      	str	r3, [r7, #4]
 8000186:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000188:	4a12      	ldr	r2, [pc, #72]	; (80001d4 <MX_GPIO_Init+0x78>)
 800018a:	4b12      	ldr	r3, [pc, #72]	; (80001d4 <MX_GPIO_Init+0x78>)
 800018c:	699b      	ldr	r3, [r3, #24]
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b0f      	ldr	r3, [pc, #60]	; (80001d4 <MX_GPIO_Init+0x78>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0304 	and.w	r3, r3, #4
 800019c:	603b      	str	r3, [r7, #0]
 800019e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PC13_GPIO_Port, LED_PC13_Pin, GPIO_PIN_RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a6:	480c      	ldr	r0, [pc, #48]	; (80001d8 <MX_GPIO_Init+0x7c>)
 80001a8:	f000 fd62 	bl	8000c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_PC13_Pin;
 80001ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80001b2:	2311      	movs	r3, #17
 80001b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001b6:	2300      	movs	r3, #0
 80001b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ba:	2302      	movs	r3, #2
 80001bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_PC13_GPIO_Port, &GPIO_InitStruct);
 80001be:	f107 0308 	add.w	r3, r7, #8
 80001c2:	4619      	mov	r1, r3
 80001c4:	4804      	ldr	r0, [pc, #16]	; (80001d8 <MX_GPIO_Init+0x7c>)
 80001c6:	f000 fbf9 	bl	80009bc <HAL_GPIO_Init>

}
 80001ca:	bf00      	nop
 80001cc:	3718      	adds	r7, #24
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40021000 	.word	0x40021000
 80001d8:	40011000 	.word	0x40011000

080001dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001dc:	b5b0      	push	{r4, r5, r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e2:	f000 fa01 	bl	80005e8 <HAL_Init>
    // x = RingBuff.get_nBytes(&ringBuffer_test);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e6:	f000 f8a5 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ea:	f7ff ffb7 	bl	800015c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001ee:	f000 f97d 	bl	80004ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Serial_init(&serial_0, &huart1);
 80001f2:	4942      	ldr	r1, [pc, #264]	; (80002fc <main+0x120>)
 80001f4:	4842      	ldr	r0, [pc, #264]	; (8000300 <main+0x124>)
 80001f6:	f001 fea7 	bl	8001f48 <Serial_init>
  Serial.read_enable(&serial_0);
 80001fa:	4b42      	ldr	r3, [pc, #264]	; (8000304 <main+0x128>)
 80001fc:	68db      	ldr	r3, [r3, #12]
 80001fe:	4840      	ldr	r0, [pc, #256]	; (8000300 <main+0x124>)
 8000200:	4798      	blx	r3
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    if( (HAL_GetTick() - task_1_lastTick) > TASK_1_PER) {
 8000202:	f000 fa49 	bl	8000698 <HAL_GetTick>
 8000206:	4602      	mov	r2, r0
 8000208:	4b3f      	ldr	r3, [pc, #252]	; (8000308 <main+0x12c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	1ad3      	subs	r3, r2, r3
 800020e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000212:	d93a      	bls.n	800028a <main+0xae>
        task_1_lastTick = HAL_GetTick();
 8000214:	f000 fa40 	bl	8000698 <HAL_GetTick>
 8000218:	4602      	mov	r2, r0
 800021a:	4b3b      	ldr	r3, [pc, #236]	; (8000308 <main+0x12c>)
 800021c:	601a      	str	r2, [r3, #0]

        HAL_GPIO_TogglePin(LED_PC13_GPIO_Port, LED_PC13_Pin);
 800021e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000222:	483a      	ldr	r0, [pc, #232]	; (800030c <main+0x130>)
 8000224:	f000 fd3c 	bl	8000ca0 <HAL_GPIO_TogglePin>
        upCnt++;
 8000228:	4b39      	ldr	r3, [pc, #228]	; (8000310 <main+0x134>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	4a38      	ldr	r2, [pc, #224]	; (8000310 <main+0x134>)
 8000230:	6013      	str	r3, [r2, #0]

        strcpy(serial_msg, "upTime in seconds: ");
 8000232:	4a38      	ldr	r2, [pc, #224]	; (8000314 <main+0x138>)
 8000234:	4b38      	ldr	r3, [pc, #224]	; (8000318 <main+0x13c>)
 8000236:	4614      	mov	r4, r2
 8000238:	461d      	mov	r5, r3
 800023a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800023c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800023e:	682b      	ldr	r3, [r5, #0]
 8000240:	6023      	str	r3, [r4, #0]
        num2str(upCnt, num_str);
 8000242:	4b33      	ldr	r3, [pc, #204]	; (8000310 <main+0x134>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4935      	ldr	r1, [pc, #212]	; (800031c <main+0x140>)
 8000248:	4618      	mov	r0, r3
 800024a:	f001 fd5d 	bl	8001d08 <num2str>
        strcat(serial_msg, num_str);
 800024e:	4933      	ldr	r1, [pc, #204]	; (800031c <main+0x140>)
 8000250:	4830      	ldr	r0, [pc, #192]	; (8000314 <main+0x138>)
 8000252:	f002 f8e1 	bl	8002418 <strcat>
        strcat(serial_msg, "\n\r");
 8000256:	482f      	ldr	r0, [pc, #188]	; (8000314 <main+0x138>)
 8000258:	f7ff ff78 	bl	800014c <strlen>
 800025c:	4603      	mov	r3, r0
 800025e:	461a      	mov	r2, r3
 8000260:	4b2c      	ldr	r3, [pc, #176]	; (8000314 <main+0x138>)
 8000262:	4413      	add	r3, r2
 8000264:	4a2e      	ldr	r2, [pc, #184]	; (8000320 <main+0x144>)
 8000266:	8811      	ldrh	r1, [r2, #0]
 8000268:	7892      	ldrb	r2, [r2, #2]
 800026a:	8019      	strh	r1, [r3, #0]
 800026c:	709a      	strb	r2, [r3, #2]
        
        serial_msg_len = strlen(serial_msg);
 800026e:	4829      	ldr	r0, [pc, #164]	; (8000314 <main+0x138>)
 8000270:	f7ff ff6c 	bl	800014c <strlen>
 8000274:	4603      	mov	r3, r0
 8000276:	b2da      	uxtb	r2, r3
 8000278:	4b2a      	ldr	r3, [pc, #168]	; (8000324 <main+0x148>)
 800027a:	701a      	strb	r2, [r3, #0]
        //HAL_UART_Transmit_IT(&huart1, serial_msg, serial_msg_len);
        Serial.write(&serial_0, serial_msg, serial_msg_len);
 800027c:	4b21      	ldr	r3, [pc, #132]	; (8000304 <main+0x128>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a28      	ldr	r2, [pc, #160]	; (8000324 <main+0x148>)
 8000282:	7812      	ldrb	r2, [r2, #0]
 8000284:	4923      	ldr	r1, [pc, #140]	; (8000314 <main+0x138>)
 8000286:	481e      	ldr	r0, [pc, #120]	; (8000300 <main+0x124>)
 8000288:	4798      	blx	r3
        // Serial.println(&serial_0, "test_serial #3\r");

    } 

    
    if( (HAL_GetTick() - task_2_lastTick) > TASK_2_PER) {
 800028a:	f000 fa05 	bl	8000698 <HAL_GetTick>
 800028e:	4602      	mov	r2, r0
 8000290:	4b25      	ldr	r3, [pc, #148]	; (8000328 <main+0x14c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	1ad3      	subs	r3, r2, r3
 8000296:	2b0a      	cmp	r3, #10
 8000298:	d9b3      	bls.n	8000202 <main+0x26>
        uint8_t serial_Rx_size = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	71fb      	strb	r3, [r7, #7]

        serial_Rx_size = Serial.isData(&serial_0); 
 800029e:	4b19      	ldr	r3, [pc, #100]	; (8000304 <main+0x128>)
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	4817      	ldr	r0, [pc, #92]	; (8000300 <main+0x124>)
 80002a4:	4798      	blx	r3
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
        if( serial_Rx_size > 0 && (HAL_GetTick() - Serial.Rx_lastTime(&serial_0) > 5) ) {
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d01e      	beq.n	80002ee <main+0x112>
 80002b0:	f000 f9f2 	bl	8000698 <HAL_GetTick>
 80002b4:	4604      	mov	r4, r0
 80002b6:	4b13      	ldr	r3, [pc, #76]	; (8000304 <main+0x128>)
 80002b8:	6a1b      	ldr	r3, [r3, #32]
 80002ba:	4811      	ldr	r0, [pc, #68]	; (8000300 <main+0x124>)
 80002bc:	4798      	blx	r3
 80002be:	4603      	mov	r3, r0
 80002c0:	1ae3      	subs	r3, r4, r3
 80002c2:	2b05      	cmp	r3, #5
 80002c4:	d913      	bls.n	80002ee <main+0x112>
            /* read all */
            //Serial.read(&serial_0, serRx_buff, serial_Rx_size);
            serial_Rx_size = Serial.readUntil(&serial_0, serRx_buff, SER_RX_BUFF_SIZE, '\r');
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <main+0x128>)
 80002c8:	695c      	ldr	r4, [r3, #20]
 80002ca:	230d      	movs	r3, #13
 80002cc:	2232      	movs	r2, #50	; 0x32
 80002ce:	4917      	ldr	r1, [pc, #92]	; (800032c <main+0x150>)
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <main+0x124>)
 80002d2:	47a0      	blx	r4
 80002d4:	4603      	mov	r3, r0
 80002d6:	71fb      	strb	r3, [r7, #7]

            Serial.write(&serial_0, serRx_buff, serial_Rx_size);
 80002d8:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <main+0x128>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	79fa      	ldrb	r2, [r7, #7]
 80002de:	4913      	ldr	r1, [pc, #76]	; (800032c <main+0x150>)
 80002e0:	4807      	ldr	r0, [pc, #28]	; (8000300 <main+0x124>)
 80002e2:	4798      	blx	r3
            Serial.print(&serial_0, "\r\n");
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <main+0x128>)
 80002e6:	685b      	ldr	r3, [r3, #4]
 80002e8:	4911      	ldr	r1, [pc, #68]	; (8000330 <main+0x154>)
 80002ea:	4805      	ldr	r0, [pc, #20]	; (8000300 <main+0x124>)
 80002ec:	4798      	blx	r3
        }

        task_2_lastTick = HAL_GetTick();
 80002ee:	f000 f9d3 	bl	8000698 <HAL_GetTick>
 80002f2:	4602      	mov	r2, r0
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <main+0x14c>)
 80002f6:	601a      	str	r2, [r3, #0]
    if( (HAL_GetTick() - task_1_lastTick) > TASK_1_PER) {
 80002f8:	e783      	b.n	8000202 <main+0x26>
 80002fa:	bf00      	nop
 80002fc:	200000e0 	.word	0x200000e0
 8000300:	2000000c 	.word	0x2000000c
 8000304:	20000028 	.word	0x20000028
 8000308:	20000068 	.word	0x20000068
 800030c:	40011000 	.word	0x40011000
 8000310:	2000006c 	.word	0x2000006c
 8000314:	20000070 	.word	0x20000070
 8000318:	08002450 	.word	0x08002450
 800031c:	20000090 	.word	0x20000090
 8000320:	08002464 	.word	0x08002464
 8000324:	2000009a 	.word	0x2000009a
 8000328:	2000009c 	.word	0x2000009c
 800032c:	200000a0 	.word	0x200000a0
 8000330:	08002468 	.word	0x08002468

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b090      	sub	sp, #64	; 0x40
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	f107 0318 	add.w	r3, r7, #24
 800033e:	2228      	movs	r2, #40	; 0x28
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f002 f860 	bl	8002408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
 8000354:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000356:	2302      	movs	r3, #2
 8000358:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035a:	2301      	movs	r3, #1
 800035c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035e:	2310      	movs	r3, #16
 8000360:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000362:	2300      	movs	r3, #0
 8000364:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000366:	f107 0318 	add.w	r3, r7, #24
 800036a:	4618      	mov	r0, r3
 800036c:	f000 fcb0 	bl	8000cd0 <HAL_RCC_OscConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000376:	f000 f818 	bl	80003aa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037a:	230f      	movs	r3, #15
 800037c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800037e:	2300      	movs	r3, #0
 8000380:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f000 ff1c 	bl	80011d0 <HAL_RCC_ClockConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800039e:	f000 f804 	bl	80003aa <Error_Handler>
  }
}
 80003a2:	bf00      	nop
 80003a4:	3740      	adds	r7, #64	; 0x40
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
	...

080003b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003be:	4a15      	ldr	r2, [pc, #84]	; (8000414 <HAL_MspInit+0x5c>)
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <HAL_MspInit+0x5c>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	6193      	str	r3, [r2, #24]
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <HAL_MspInit+0x5c>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	60bb      	str	r3, [r7, #8]
 80003d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d6:	4a0f      	ldr	r2, [pc, #60]	; (8000414 <HAL_MspInit+0x5c>)
 80003d8:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <HAL_MspInit+0x5c>)
 80003da:	69db      	ldr	r3, [r3, #28]
 80003dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e0:	61d3      	str	r3, [r2, #28]
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <HAL_MspInit+0x5c>)
 80003e4:	69db      	ldr	r3, [r3, #28]
 80003e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ee:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <HAL_MspInit+0x60>)
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <HAL_MspInit+0x60>)
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040a:	bf00      	nop
 800040c:	3714      	adds	r7, #20
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr
 8000414:	40021000 	.word	0x40021000
 8000418:	40010000 	.word	0x40010000

0800041c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800042c:	e7fe      	b.n	800042c <HardFault_Handler+0x4>

0800042e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <MemManage_Handler+0x4>

08000434 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <BusFault_Handler+0x4>

0800043a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <UsageFault_Handler+0x4>

08000440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr

08000464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000468:	f000 f904 	bl	8000674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}

08000470 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000474:	4802      	ldr	r0, [pc, #8]	; (8000480 <USART1_IRQHandler+0x10>)
 8000476:	f001 f92d 	bl	80016d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	200000e0 	.word	0x200000e0

08000484 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000488:	4a15      	ldr	r2, [pc, #84]	; (80004e0 <SystemInit+0x5c>)
 800048a:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <SystemInit+0x5c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f043 0301 	orr.w	r3, r3, #1
 8000492:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000494:	4912      	ldr	r1, [pc, #72]	; (80004e0 <SystemInit+0x5c>)
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <SystemInit+0x5c>)
 8000498:	685a      	ldr	r2, [r3, #4]
 800049a:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <SystemInit+0x60>)
 800049c:	4013      	ands	r3, r2
 800049e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80004a0:	4a0f      	ldr	r2, [pc, #60]	; (80004e0 <SystemInit+0x5c>)
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <SystemInit+0x5c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004ae:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004b0:	4a0b      	ldr	r2, [pc, #44]	; (80004e0 <SystemInit+0x5c>)
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <SystemInit+0x5c>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004ba:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80004bc:	4a08      	ldr	r2, [pc, #32]	; (80004e0 <SystemInit+0x5c>)
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <SystemInit+0x5c>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80004c6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <SystemInit+0x5c>)
 80004ca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80004ce:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <SystemInit+0x64>)
 80004d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004d6:	609a      	str	r2, [r3, #8]
#endif 
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	40021000 	.word	0x40021000
 80004e4:	f8ff0000 	.word	0xf8ff0000
 80004e8:	e000ed00 	.word	0xe000ed00

080004ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <MX_USART1_UART_Init+0x4c>)
 80004f2:	4a12      	ldr	r2, [pc, #72]	; (800053c <MX_USART1_UART_Init+0x50>)
 80004f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <MX_USART1_UART_Init+0x4c>)
 80004f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <MX_USART1_UART_Init+0x4c>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <MX_USART1_UART_Init+0x4c>)
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <MX_USART1_UART_Init+0x4c>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MX_USART1_UART_Init+0x4c>)
 8000512:	220c      	movs	r2, #12
 8000514:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <MX_USART1_UART_Init+0x4c>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <MX_USART1_UART_Init+0x4c>)
 800051e:	2200      	movs	r2, #0
 8000520:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_USART1_UART_Init+0x4c>)
 8000524:	f000 fff0 	bl	8001508 <HAL_UART_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800052e:	f7ff ff3c 	bl	80003aa <Error_Handler>
  }

}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000e0 	.word	0x200000e0
 800053c:	40013800 	.word	0x40013800

08000540 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a20      	ldr	r2, [pc, #128]	; (80005dc <HAL_UART_MspInit+0x9c>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d139      	bne.n	80005d4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000560:	4a1f      	ldr	r2, [pc, #124]	; (80005e0 <HAL_UART_MspInit+0xa0>)
 8000562:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <HAL_UART_MspInit+0xa0>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <HAL_UART_MspInit+0xa0>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	4a19      	ldr	r2, [pc, #100]	; (80005e0 <HAL_UART_MspInit+0xa0>)
 800057a:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <HAL_UART_MspInit+0xa0>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	f043 0304 	orr.w	r3, r3, #4
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <HAL_UART_MspInit+0xa0>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000594:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000596:	2302      	movs	r3, #2
 8000598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059a:	2303      	movs	r3, #3
 800059c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	4619      	mov	r1, r3
 80005a4:	480f      	ldr	r0, [pc, #60]	; (80005e4 <HAL_UART_MspInit+0xa4>)
 80005a6:	f000 fa09 	bl	80009bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	4619      	mov	r1, r3
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <HAL_UART_MspInit+0xa4>)
 80005c0:	f000 f9fc 	bl	80009bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2100      	movs	r1, #0
 80005c8:	2025      	movs	r0, #37	; 0x25
 80005ca:	f000 f944 	bl	8000856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005ce:	2025      	movs	r0, #37	; 0x25
 80005d0:	f000 f95d 	bl	800088e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80005d4:	bf00      	nop
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40013800 	.word	0x40013800
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010800 	.word	0x40010800

080005e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <HAL_Init+0x28>)
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <HAL_Init+0x28>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f8:	2003      	movs	r0, #3
 80005fa:	f000 f921 	bl	8000840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 f808 	bl	8000614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000604:	f7ff fed8 	bl	80003b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40022000 	.word	0x40022000

08000614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <HAL_InitTick+0x54>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_InitTick+0x58>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062a:	fbb3 f3f1 	udiv	r3, r3, r1
 800062e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f939 	bl	80008aa <HAL_SYSTICK_Config>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
 8000640:	e00e      	b.n	8000660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2b0f      	cmp	r3, #15
 8000646:	d80a      	bhi.n	800065e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000648:	2200      	movs	r2, #0
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
 8000650:	f000 f901 	bl	8000856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000654:	4a06      	ldr	r2, [pc, #24]	; (8000670 <HAL_InitTick+0x5c>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800065a:	2300      	movs	r3, #0
 800065c:	e000      	b.n	8000660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000000 	.word	0x20000000
 800066c:	20000008 	.word	0x20000008
 8000670:	20000004 	.word	0x20000004

08000674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <HAL_IncTick+0x1c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <HAL_IncTick+0x20>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4413      	add	r3, r2
 8000684:	4a03      	ldr	r2, [pc, #12]	; (8000694 <HAL_IncTick+0x20>)
 8000686:	6013      	str	r3, [r2, #0]
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	20000008 	.word	0x20000008
 8000694:	20000120 	.word	0x20000120

08000698 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  return uwTick;
 800069c:	4b02      	ldr	r3, [pc, #8]	; (80006a8 <HAL_GetTick+0x10>)
 800069e:	681b      	ldr	r3, [r3, #0]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	20000120 	.word	0x20000120

080006ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c8:	4013      	ands	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006de:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	60d3      	str	r3, [r2, #12]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <__NVIC_GetPriorityGrouping+0x18>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	f003 0307 	and.w	r3, r3, #7
}
 8000702:	4618      	mov	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db0b      	blt.n	800073a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000722:	4908      	ldr	r1, [pc, #32]	; (8000744 <__NVIC_EnableIRQ+0x34>)
 8000724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000728:	095b      	lsrs	r3, r3, #5
 800072a:	79fa      	ldrb	r2, [r7, #7]
 800072c:	f002 021f 	and.w	r2, r2, #31
 8000730:	2001      	movs	r0, #1
 8000732:	fa00 f202 	lsl.w	r2, r0, r2
 8000736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100

08000748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000758:	2b00      	cmp	r3, #0
 800075a:	db0a      	blt.n	8000772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	490d      	ldr	r1, [pc, #52]	; (8000794 <__NVIC_SetPriority+0x4c>)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	683a      	ldr	r2, [r7, #0]
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	0112      	lsls	r2, r2, #4
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	440b      	add	r3, r1
 800076c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000770:	e00a      	b.n	8000788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	4909      	ldr	r1, [pc, #36]	; (8000798 <__NVIC_SetPriority+0x50>)
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	f003 030f 	and.w	r3, r3, #15
 800077a:	3b04      	subs	r3, #4
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	b2d2      	uxtb	r2, r2
 8000780:	0112      	lsls	r2, r2, #4
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	440b      	add	r3, r1
 8000786:	761a      	strb	r2, [r3, #24]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000e100 	.word	0xe000e100
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079c:	b480      	push	{r7}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	f1c3 0307 	rsb	r3, r3, #7
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	bf28      	it	cs
 80007ba:	2304      	movcs	r3, #4
 80007bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3304      	adds	r3, #4
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d902      	bls.n	80007cc <NVIC_EncodePriority+0x30>
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3b03      	subs	r3, #3
 80007ca:	e000      	b.n	80007ce <NVIC_EncodePriority+0x32>
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	2201      	movs	r2, #1
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	1e5a      	subs	r2, r3, #1
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	401a      	ands	r2, r3
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e2:	2101      	movs	r1, #1
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ea:	1e59      	subs	r1, r3, #1
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f0:	4313      	orrs	r3, r2
         );
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3724      	adds	r7, #36	; 0x24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3b01      	subs	r3, #1
 8000808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800080c:	d301      	bcc.n	8000812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080e:	2301      	movs	r3, #1
 8000810:	e00f      	b.n	8000832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <SysTick_Config+0x40>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800081a:	210f      	movs	r1, #15
 800081c:	f04f 30ff 	mov.w	r0, #4294967295
 8000820:	f7ff ff92 	bl	8000748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <SysTick_Config+0x40>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <SysTick_Config+0x40>)
 800082c:	2207      	movs	r2, #7
 800082e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	e000e010 	.word	0xe000e010

08000840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ff2f 	bl	80006ac <__NVIC_SetPriorityGrouping>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000856:	b580      	push	{r7, lr}
 8000858:	b086      	sub	sp, #24
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000868:	f7ff ff44 	bl	80006f4 <__NVIC_GetPriorityGrouping>
 800086c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	68b9      	ldr	r1, [r7, #8]
 8000872:	6978      	ldr	r0, [r7, #20]
 8000874:	f7ff ff92 	bl	800079c <NVIC_EncodePriority>
 8000878:	4602      	mov	r2, r0
 800087a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff61 	bl	8000748 <__NVIC_SetPriority>
}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff37 	bl	8000710 <__NVIC_EnableIRQ>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff ffa2 	bl	80007fc <SysTick_Config>
 80008b8:	4603      	mov	r3, r0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008cc:	2300      	movs	r3, #0
 80008ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d005      	beq.n	80008e6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2204      	movs	r2, #4
 80008de:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80008e0:	2301      	movs	r3, #1
 80008e2:	73fb      	strb	r3, [r7, #15]
 80008e4:	e057      	b.n	8000996 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	6812      	ldr	r2, [r2, #0]
 80008ee:	6812      	ldr	r2, [r2, #0]
 80008f0:	f022 020e 	bic.w	r2, r2, #14
 80008f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	6812      	ldr	r2, [r2, #0]
 80008fe:	6812      	ldr	r2, [r2, #0]
 8000900:	f022 0201 	bic.w	r2, r2, #1
 8000904:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000906:	4a26      	ldr	r2, [pc, #152]	; (80009a0 <HAL_DMA_Abort_IT+0xdc>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	4b25      	ldr	r3, [pc, #148]	; (80009a4 <HAL_DMA_Abort_IT+0xe0>)
 8000910:	4299      	cmp	r1, r3
 8000912:	d02e      	beq.n	8000972 <HAL_DMA_Abort_IT+0xae>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <HAL_DMA_Abort_IT+0xe4>)
 800091c:	4299      	cmp	r1, r3
 800091e:	d026      	beq.n	800096e <HAL_DMA_Abort_IT+0xaa>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <HAL_DMA_Abort_IT+0xe8>)
 8000928:	4299      	cmp	r1, r3
 800092a:	d01d      	beq.n	8000968 <HAL_DMA_Abort_IT+0xa4>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <HAL_DMA_Abort_IT+0xec>)
 8000934:	4299      	cmp	r1, r3
 8000936:	d014      	beq.n	8000962 <HAL_DMA_Abort_IT+0x9e>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <HAL_DMA_Abort_IT+0xf0>)
 8000940:	4299      	cmp	r1, r3
 8000942:	d00b      	beq.n	800095c <HAL_DMA_Abort_IT+0x98>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4619      	mov	r1, r3
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <HAL_DMA_Abort_IT+0xf4>)
 800094c:	4299      	cmp	r1, r3
 800094e:	d102      	bne.n	8000956 <HAL_DMA_Abort_IT+0x92>
 8000950:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000954:	e00e      	b.n	8000974 <HAL_DMA_Abort_IT+0xb0>
 8000956:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800095a:	e00b      	b.n	8000974 <HAL_DMA_Abort_IT+0xb0>
 800095c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000960:	e008      	b.n	8000974 <HAL_DMA_Abort_IT+0xb0>
 8000962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000966:	e005      	b.n	8000974 <HAL_DMA_Abort_IT+0xb0>
 8000968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096c:	e002      	b.n	8000974 <HAL_DMA_Abort_IT+0xb0>
 800096e:	2310      	movs	r3, #16
 8000970:	e000      	b.n	8000974 <HAL_DMA_Abort_IT+0xb0>
 8000972:	2301      	movs	r3, #1
 8000974:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2201      	movs	r2, #1
 800097a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2200      	movs	r2, #0
 8000982:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800098a:	2b00      	cmp	r3, #0
 800098c:	d003      	beq.n	8000996 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	4798      	blx	r3
    } 
  }
  return status;
 8000996:	7bfb      	ldrb	r3, [r7, #15]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40020000 	.word	0x40020000
 80009a4:	40020008 	.word	0x40020008
 80009a8:	4002001c 	.word	0x4002001c
 80009ac:	40020030 	.word	0x40020030
 80009b0:	40020044 	.word	0x40020044
 80009b4:	40020058 	.word	0x40020058
 80009b8:	4002006c 	.word	0x4002006c

080009bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009bc:	b480      	push	{r7}
 80009be:	b08b      	sub	sp, #44	; 0x2c
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ce:	e127      	b.n	8000c20 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009d0:	2201      	movs	r2, #1
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	4013      	ands	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	f040 8116 	bne.w	8000c1a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	2b12      	cmp	r3, #18
 80009f4:	d034      	beq.n	8000a60 <HAL_GPIO_Init+0xa4>
 80009f6:	2b12      	cmp	r3, #18
 80009f8:	d80d      	bhi.n	8000a16 <HAL_GPIO_Init+0x5a>
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d02b      	beq.n	8000a56 <HAL_GPIO_Init+0x9a>
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d804      	bhi.n	8000a0c <HAL_GPIO_Init+0x50>
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d031      	beq.n	8000a6a <HAL_GPIO_Init+0xae>
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d01c      	beq.n	8000a44 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a0a:	e048      	b.n	8000a9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a0c:	2b03      	cmp	r3, #3
 8000a0e:	d043      	beq.n	8000a98 <HAL_GPIO_Init+0xdc>
 8000a10:	2b11      	cmp	r3, #17
 8000a12:	d01b      	beq.n	8000a4c <HAL_GPIO_Init+0x90>
          break;
 8000a14:	e043      	b.n	8000a9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a16:	4a89      	ldr	r2, [pc, #548]	; (8000c3c <HAL_GPIO_Init+0x280>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d026      	beq.n	8000a6a <HAL_GPIO_Init+0xae>
 8000a1c:	4a87      	ldr	r2, [pc, #540]	; (8000c3c <HAL_GPIO_Init+0x280>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d806      	bhi.n	8000a30 <HAL_GPIO_Init+0x74>
 8000a22:	4a87      	ldr	r2, [pc, #540]	; (8000c40 <HAL_GPIO_Init+0x284>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d020      	beq.n	8000a6a <HAL_GPIO_Init+0xae>
 8000a28:	4a86      	ldr	r2, [pc, #536]	; (8000c44 <HAL_GPIO_Init+0x288>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d01d      	beq.n	8000a6a <HAL_GPIO_Init+0xae>
          break;
 8000a2e:	e036      	b.n	8000a9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a30:	4a85      	ldr	r2, [pc, #532]	; (8000c48 <HAL_GPIO_Init+0x28c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d019      	beq.n	8000a6a <HAL_GPIO_Init+0xae>
 8000a36:	4a85      	ldr	r2, [pc, #532]	; (8000c4c <HAL_GPIO_Init+0x290>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d016      	beq.n	8000a6a <HAL_GPIO_Init+0xae>
 8000a3c:	4a84      	ldr	r2, [pc, #528]	; (8000c50 <HAL_GPIO_Init+0x294>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d013      	beq.n	8000a6a <HAL_GPIO_Init+0xae>
          break;
 8000a42:	e02c      	b.n	8000a9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	623b      	str	r3, [r7, #32]
          break;
 8000a4a:	e028      	b.n	8000a9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	3304      	adds	r3, #4
 8000a52:	623b      	str	r3, [r7, #32]
          break;
 8000a54:	e023      	b.n	8000a9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	3308      	adds	r3, #8
 8000a5c:	623b      	str	r3, [r7, #32]
          break;
 8000a5e:	e01e      	b.n	8000a9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	330c      	adds	r3, #12
 8000a66:	623b      	str	r3, [r7, #32]
          break;
 8000a68:	e019      	b.n	8000a9e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a72:	2304      	movs	r3, #4
 8000a74:	623b      	str	r3, [r7, #32]
          break;
 8000a76:	e012      	b.n	8000a9e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d105      	bne.n	8000a8c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a80:	2308      	movs	r3, #8
 8000a82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	69fa      	ldr	r2, [r7, #28]
 8000a88:	611a      	str	r2, [r3, #16]
          break;
 8000a8a:	e008      	b.n	8000a9e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a8c:	2308      	movs	r3, #8
 8000a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	69fa      	ldr	r2, [r7, #28]
 8000a94:	615a      	str	r2, [r3, #20]
          break;
 8000a96:	e002      	b.n	8000a9e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
          break;
 8000a9c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	2bff      	cmp	r3, #255	; 0xff
 8000aa2:	d801      	bhi.n	8000aa8 <HAL_GPIO_Init+0xec>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	e001      	b.n	8000aac <HAL_GPIO_Init+0xf0>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3304      	adds	r3, #4
 8000aac:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	2bff      	cmp	r3, #255	; 0xff
 8000ab2:	d802      	bhi.n	8000aba <HAL_GPIO_Init+0xfe>
 8000ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	e002      	b.n	8000ac0 <HAL_GPIO_Init+0x104>
 8000aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abc:	3b08      	subs	r3, #8
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	210f      	movs	r1, #15
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	401a      	ands	r2, r3
 8000ad2:	6a39      	ldr	r1, [r7, #32]
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	431a      	orrs	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f000 8096 	beq.w	8000c1a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000aee:	4a59      	ldr	r2, [pc, #356]	; (8000c54 <HAL_GPIO_Init+0x298>)
 8000af0:	4b58      	ldr	r3, [pc, #352]	; (8000c54 <HAL_GPIO_Init+0x298>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6193      	str	r3, [r2, #24]
 8000afa:	4b56      	ldr	r3, [pc, #344]	; (8000c54 <HAL_GPIO_Init+0x298>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b06:	4a54      	ldr	r2, [pc, #336]	; (8000c58 <HAL_GPIO_Init+0x29c>)
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b12:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b16:	f003 0303 	and.w	r3, r3, #3
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	220f      	movs	r2, #15
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43db      	mvns	r3, r3
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	4013      	ands	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a4b      	ldr	r2, [pc, #300]	; (8000c5c <HAL_GPIO_Init+0x2a0>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d013      	beq.n	8000b5a <HAL_GPIO_Init+0x19e>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a4a      	ldr	r2, [pc, #296]	; (8000c60 <HAL_GPIO_Init+0x2a4>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d00d      	beq.n	8000b56 <HAL_GPIO_Init+0x19a>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a49      	ldr	r2, [pc, #292]	; (8000c64 <HAL_GPIO_Init+0x2a8>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d007      	beq.n	8000b52 <HAL_GPIO_Init+0x196>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a48      	ldr	r2, [pc, #288]	; (8000c68 <HAL_GPIO_Init+0x2ac>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d101      	bne.n	8000b4e <HAL_GPIO_Init+0x192>
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	e006      	b.n	8000b5c <HAL_GPIO_Init+0x1a0>
 8000b4e:	2304      	movs	r3, #4
 8000b50:	e004      	b.n	8000b5c <HAL_GPIO_Init+0x1a0>
 8000b52:	2302      	movs	r3, #2
 8000b54:	e002      	b.n	8000b5c <HAL_GPIO_Init+0x1a0>
 8000b56:	2301      	movs	r3, #1
 8000b58:	e000      	b.n	8000b5c <HAL_GPIO_Init+0x1a0>
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b5e:	f002 0203 	and.w	r2, r2, #3
 8000b62:	0092      	lsls	r2, r2, #2
 8000b64:	4093      	lsls	r3, r2
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b6c:	493a      	ldr	r1, [pc, #232]	; (8000c58 <HAL_GPIO_Init+0x29c>)
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	089b      	lsrs	r3, r3, #2
 8000b72:	3302      	adds	r3, #2
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d006      	beq.n	8000b94 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b86:	4939      	ldr	r1, [pc, #228]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000b88:	4b38      	ldr	r3, [pc, #224]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	600b      	str	r3, [r1, #0]
 8000b92:	e006      	b.n	8000ba2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b94:	4935      	ldr	r1, [pc, #212]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000b96:	4b35      	ldr	r3, [pc, #212]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d006      	beq.n	8000bbc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bae:	492f      	ldr	r1, [pc, #188]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000bb0:	4b2e      	ldr	r3, [pc, #184]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	604b      	str	r3, [r1, #4]
 8000bba:	e006      	b.n	8000bca <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bbc:	492b      	ldr	r1, [pc, #172]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000bbe:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d006      	beq.n	8000be4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bd6:	4925      	ldr	r1, [pc, #148]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000bd8:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000bda:	689a      	ldr	r2, [r3, #8]
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	608b      	str	r3, [r1, #8]
 8000be2:	e006      	b.n	8000bf2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000be4:	4921      	ldr	r1, [pc, #132]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000be6:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000be8:	689a      	ldr	r2, [r3, #8]
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	4013      	ands	r3, r2
 8000bf0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d006      	beq.n	8000c0c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bfe:	491b      	ldr	r1, [pc, #108]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000c02:	68da      	ldr	r2, [r3, #12]
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	60cb      	str	r3, [r1, #12]
 8000c0a:	e006      	b.n	8000c1a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c0c:	4917      	ldr	r1, [pc, #92]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000c10:	68da      	ldr	r2, [r3, #12]
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	43db      	mvns	r3, r3
 8000c16:	4013      	ands	r3, r2
 8000c18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c26:	fa22 f303 	lsr.w	r3, r2, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f47f aed0 	bne.w	80009d0 <HAL_GPIO_Init+0x14>
  }
}
 8000c30:	bf00      	nop
 8000c32:	372c      	adds	r7, #44	; 0x2c
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	10210000 	.word	0x10210000
 8000c40:	10110000 	.word	0x10110000
 8000c44:	10120000 	.word	0x10120000
 8000c48:	10310000 	.word	0x10310000
 8000c4c:	10320000 	.word	0x10320000
 8000c50:	10220000 	.word	0x10220000
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010000 	.word	0x40010000
 8000c5c:	40010800 	.word	0x40010800
 8000c60:	40010c00 	.word	0x40010c00
 8000c64:	40011000 	.word	0x40011000
 8000c68:	40011400 	.word	0x40011400
 8000c6c:	40010400 	.word	0x40010400

08000c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	807b      	strh	r3, [r7, #2]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c80:	787b      	ldrb	r3, [r7, #1]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c86:	887a      	ldrh	r2, [r7, #2]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c8c:	e003      	b.n	8000c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c8e:	887b      	ldrh	r3, [r7, #2]
 8000c90:	041a      	lsls	r2, r3, #16
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	611a      	str	r2, [r3, #16]
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	887b      	ldrh	r3, [r7, #2]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cb8:	887a      	ldrh	r2, [r7, #2]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000cbe:	e002      	b.n	8000cc6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cc0:	887a      	ldrh	r2, [r7, #2]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	611a      	str	r2, [r3, #16]
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e26c      	b.n	80011bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 8087 	beq.w	8000dfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cf0:	4b92      	ldr	r3, [pc, #584]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 030c 	and.w	r3, r3, #12
 8000cf8:	2b04      	cmp	r3, #4
 8000cfa:	d00c      	beq.n	8000d16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cfc:	4b8f      	ldr	r3, [pc, #572]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 030c 	and.w	r3, r3, #12
 8000d04:	2b08      	cmp	r3, #8
 8000d06:	d112      	bne.n	8000d2e <HAL_RCC_OscConfig+0x5e>
 8000d08:	4b8c      	ldr	r3, [pc, #560]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d14:	d10b      	bne.n	8000d2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d16:	4b89      	ldr	r3, [pc, #548]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d06c      	beq.n	8000dfc <HAL_RCC_OscConfig+0x12c>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d168      	bne.n	8000dfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e246      	b.n	80011bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d36:	d106      	bne.n	8000d46 <HAL_RCC_OscConfig+0x76>
 8000d38:	4a80      	ldr	r2, [pc, #512]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	4b80      	ldr	r3, [pc, #512]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	e02e      	b.n	8000da4 <HAL_RCC_OscConfig+0xd4>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10c      	bne.n	8000d68 <HAL_RCC_OscConfig+0x98>
 8000d4e:	4a7b      	ldr	r2, [pc, #492]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d50:	4b7a      	ldr	r3, [pc, #488]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	4a78      	ldr	r2, [pc, #480]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	4b77      	ldr	r3, [pc, #476]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	e01d      	b.n	8000da4 <HAL_RCC_OscConfig+0xd4>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d70:	d10c      	bne.n	8000d8c <HAL_RCC_OscConfig+0xbc>
 8000d72:	4a72      	ldr	r2, [pc, #456]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d74:	4b71      	ldr	r3, [pc, #452]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	4a6f      	ldr	r2, [pc, #444]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d80:	4b6e      	ldr	r3, [pc, #440]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	e00b      	b.n	8000da4 <HAL_RCC_OscConfig+0xd4>
 8000d8c:	4a6b      	ldr	r2, [pc, #428]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	4b6b      	ldr	r3, [pc, #428]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	4a68      	ldr	r2, [pc, #416]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	4b68      	ldr	r3, [pc, #416]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d013      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dac:	f7ff fc74 	bl	8000698 <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db2:	e008      	b.n	8000dc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db4:	f7ff fc70 	bl	8000698 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b64      	cmp	r3, #100	; 0x64
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e1fa      	b.n	80011bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc6:	4b5d      	ldr	r3, [pc, #372]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0f0      	beq.n	8000db4 <HAL_RCC_OscConfig+0xe4>
 8000dd2:	e014      	b.n	8000dfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fc60 	bl	8000698 <HAL_GetTick>
 8000dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ddc:	f7ff fc5c 	bl	8000698 <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b64      	cmp	r3, #100	; 0x64
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e1e6      	b.n	80011bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dee:	4b53      	ldr	r3, [pc, #332]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f0      	bne.n	8000ddc <HAL_RCC_OscConfig+0x10c>
 8000dfa:	e000      	b.n	8000dfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d063      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e0a:	4b4c      	ldr	r3, [pc, #304]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 030c 	and.w	r3, r3, #12
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d00b      	beq.n	8000e2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e16:	4b49      	ldr	r3, [pc, #292]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 030c 	and.w	r3, r3, #12
 8000e1e:	2b08      	cmp	r3, #8
 8000e20:	d11c      	bne.n	8000e5c <HAL_RCC_OscConfig+0x18c>
 8000e22:	4b46      	ldr	r3, [pc, #280]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d116      	bne.n	8000e5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e2e:	4b43      	ldr	r3, [pc, #268]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d005      	beq.n	8000e46 <HAL_RCC_OscConfig+0x176>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d001      	beq.n	8000e46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e1ba      	b.n	80011bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e46:	493d      	ldr	r1, [pc, #244]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e48:	4b3c      	ldr	r3, [pc, #240]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	695b      	ldr	r3, [r3, #20]
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	4313      	orrs	r3, r2
 8000e58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5a:	e03a      	b.n	8000ed2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	691b      	ldr	r3, [r3, #16]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d020      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e64:	4b36      	ldr	r3, [pc, #216]	; (8000f40 <HAL_RCC_OscConfig+0x270>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6a:	f7ff fc15 	bl	8000698 <HAL_GetTick>
 8000e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e70:	e008      	b.n	8000e84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e72:	f7ff fc11 	bl	8000698 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d901      	bls.n	8000e84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e80:	2303      	movs	r3, #3
 8000e82:	e19b      	b.n	80011bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e84:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f0      	beq.n	8000e72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e90:	492a      	ldr	r1, [pc, #168]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e92:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	600b      	str	r3, [r1, #0]
 8000ea4:	e015      	b.n	8000ed2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ea6:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <HAL_RCC_OscConfig+0x270>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eac:	f7ff fbf4 	bl	8000698 <HAL_GetTick>
 8000eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb4:	f7ff fbf0 	bl	8000698 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e17a      	b.n	80011bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1f0      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0308 	and.w	r3, r3, #8
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d03a      	beq.n	8000f54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d019      	beq.n	8000f1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_RCC_OscConfig+0x274>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eec:	f7ff fbd4 	bl	8000698 <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef4:	f7ff fbd0 	bl	8000698 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e15a      	b.n	80011bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0f0      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f000 fada 	bl	80014cc <RCC_Delay>
 8000f18:	e01c      	b.n	8000f54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_RCC_OscConfig+0x274>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f20:	f7ff fbba 	bl	8000698 <HAL_GetTick>
 8000f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f26:	e00f      	b.n	8000f48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f28:	f7ff fbb6 	bl	8000698 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d908      	bls.n	8000f48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e140      	b.n	80011bc <HAL_RCC_OscConfig+0x4ec>
 8000f3a:	bf00      	nop
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	42420000 	.word	0x42420000
 8000f44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f48:	4b9e      	ldr	r3, [pc, #632]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1e9      	bne.n	8000f28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f000 80a6 	beq.w	80010ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f66:	4b97      	ldr	r3, [pc, #604]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10d      	bne.n	8000f8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4a94      	ldr	r2, [pc, #592]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8000f74:	4b93      	ldr	r3, [pc, #588]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	61d3      	str	r3, [r2, #28]
 8000f7e:	4b91      	ldr	r3, [pc, #580]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f8e:	4b8e      	ldr	r3, [pc, #568]	; (80011c8 <HAL_RCC_OscConfig+0x4f8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d118      	bne.n	8000fcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f9a:	4a8b      	ldr	r2, [pc, #556]	; (80011c8 <HAL_RCC_OscConfig+0x4f8>)
 8000f9c:	4b8a      	ldr	r3, [pc, #552]	; (80011c8 <HAL_RCC_OscConfig+0x4f8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fa6:	f7ff fb77 	bl	8000698 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fae:	f7ff fb73 	bl	8000698 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b64      	cmp	r3, #100	; 0x64
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e0fd      	b.n	80011bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc0:	4b81      	ldr	r3, [pc, #516]	; (80011c8 <HAL_RCC_OscConfig+0x4f8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f0      	beq.n	8000fae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d106      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x312>
 8000fd4:	4a7b      	ldr	r2, [pc, #492]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8000fd6:	4b7b      	ldr	r3, [pc, #492]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8000fd8:	6a1b      	ldr	r3, [r3, #32]
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	6213      	str	r3, [r2, #32]
 8000fe0:	e02d      	b.n	800103e <HAL_RCC_OscConfig+0x36e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10c      	bne.n	8001004 <HAL_RCC_OscConfig+0x334>
 8000fea:	4a76      	ldr	r2, [pc, #472]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8000fec:	4b75      	ldr	r3, [pc, #468]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	f023 0301 	bic.w	r3, r3, #1
 8000ff4:	6213      	str	r3, [r2, #32]
 8000ff6:	4a73      	ldr	r2, [pc, #460]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8000ff8:	4b72      	ldr	r3, [pc, #456]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	f023 0304 	bic.w	r3, r3, #4
 8001000:	6213      	str	r3, [r2, #32]
 8001002:	e01c      	b.n	800103e <HAL_RCC_OscConfig+0x36e>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	2b05      	cmp	r3, #5
 800100a:	d10c      	bne.n	8001026 <HAL_RCC_OscConfig+0x356>
 800100c:	4a6d      	ldr	r2, [pc, #436]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 800100e:	4b6d      	ldr	r3, [pc, #436]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	f043 0304 	orr.w	r3, r3, #4
 8001016:	6213      	str	r3, [r2, #32]
 8001018:	4a6a      	ldr	r2, [pc, #424]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 800101a:	4b6a      	ldr	r3, [pc, #424]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6213      	str	r3, [r2, #32]
 8001024:	e00b      	b.n	800103e <HAL_RCC_OscConfig+0x36e>
 8001026:	4a67      	ldr	r2, [pc, #412]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8001028:	4b66      	ldr	r3, [pc, #408]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	f023 0301 	bic.w	r3, r3, #1
 8001030:	6213      	str	r3, [r2, #32]
 8001032:	4a64      	ldr	r2, [pc, #400]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8001034:	4b63      	ldr	r3, [pc, #396]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	f023 0304 	bic.w	r3, r3, #4
 800103c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d015      	beq.n	8001072 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001046:	f7ff fb27 	bl	8000698 <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800104c:	e00a      	b.n	8001064 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800104e:	f7ff fb23 	bl	8000698 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	f241 3288 	movw	r2, #5000	; 0x1388
 800105c:	4293      	cmp	r3, r2
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e0ab      	b.n	80011bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001064:	4b57      	ldr	r3, [pc, #348]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0ee      	beq.n	800104e <HAL_RCC_OscConfig+0x37e>
 8001070:	e014      	b.n	800109c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001072:	f7ff fb11 	bl	8000698 <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001078:	e00a      	b.n	8001090 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800107a:	f7ff fb0d 	bl	8000698 <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	f241 3288 	movw	r2, #5000	; 0x1388
 8001088:	4293      	cmp	r3, r2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e095      	b.n	80011bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001090:	4b4c      	ldr	r3, [pc, #304]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1ee      	bne.n	800107a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800109c:	7dfb      	ldrb	r3, [r7, #23]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d105      	bne.n	80010ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a2:	4a48      	ldr	r2, [pc, #288]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 80010a4:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 80010a6:	69db      	ldr	r3, [r3, #28]
 80010a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 8081 	beq.w	80011ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010b8:	4b42      	ldr	r3, [pc, #264]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 030c 	and.w	r3, r3, #12
 80010c0:	2b08      	cmp	r3, #8
 80010c2:	d061      	beq.n	8001188 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d146      	bne.n	800115a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010cc:	4b3f      	ldr	r3, [pc, #252]	; (80011cc <HAL_RCC_OscConfig+0x4fc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d2:	f7ff fae1 	bl	8000698 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010da:	f7ff fadd 	bl	8000698 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e067      	b.n	80011bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ec:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1f0      	bne.n	80010da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001100:	d108      	bne.n	8001114 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001102:	4930      	ldr	r1, [pc, #192]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8001104:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	4313      	orrs	r3, r2
 8001112:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001114:	482b      	ldr	r0, [pc, #172]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8001116:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a19      	ldr	r1, [r3, #32]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	430b      	orrs	r3, r1
 8001128:	4313      	orrs	r3, r2
 800112a:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800112c:	4b27      	ldr	r3, [pc, #156]	; (80011cc <HAL_RCC_OscConfig+0x4fc>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001132:	f7ff fab1 	bl	8000698 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800113a:	f7ff faad 	bl	8000698 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e037      	b.n	80011bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0f0      	beq.n	800113a <HAL_RCC_OscConfig+0x46a>
 8001158:	e02f      	b.n	80011ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_RCC_OscConfig+0x4fc>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff fa9a 	bl	8000698 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001168:	f7ff fa96 	bl	8000698 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e020      	b.n	80011bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f0      	bne.n	8001168 <HAL_RCC_OscConfig+0x498>
 8001186:	e018      	b.n	80011ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d101      	bne.n	8001194 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e013      	b.n	80011bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_RCC_OscConfig+0x4f4>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d106      	bne.n	80011b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d001      	beq.n	80011ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40007000 	.word	0x40007000
 80011cc:	42420060 	.word	0x42420060

080011d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e0d0      	b.n	8001386 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011e4:	4b6a      	ldr	r3, [pc, #424]	; (8001390 <HAL_RCC_ClockConfig+0x1c0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0207 	and.w	r2, r3, #7
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d210      	bcs.n	8001214 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f2:	4967      	ldr	r1, [pc, #412]	; (8001390 <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	4b66      	ldr	r3, [pc, #408]	; (8001390 <HAL_RCC_ClockConfig+0x1c0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f023 0207 	bic.w	r2, r3, #7
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	4313      	orrs	r3, r2
 8001200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001202:	4b63      	ldr	r3, [pc, #396]	; (8001390 <HAL_RCC_ClockConfig+0x1c0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0207 	and.w	r2, r3, #7
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	429a      	cmp	r2, r3
 800120e:	d001      	beq.n	8001214 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e0b8      	b.n	8001386 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d020      	beq.n	8001262 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800122c:	4a59      	ldr	r2, [pc, #356]	; (8001394 <HAL_RCC_ClockConfig+0x1c4>)
 800122e:	4b59      	ldr	r3, [pc, #356]	; (8001394 <HAL_RCC_ClockConfig+0x1c4>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001236:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001244:	4a53      	ldr	r2, [pc, #332]	; (8001394 <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	4b53      	ldr	r3, [pc, #332]	; (8001394 <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800124e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001250:	4950      	ldr	r1, [pc, #320]	; (8001394 <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	4b50      	ldr	r3, [pc, #320]	; (8001394 <HAL_RCC_ClockConfig+0x1c4>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	4313      	orrs	r3, r2
 8001260:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d040      	beq.n	80012f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d107      	bne.n	8001286 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001276:	4b47      	ldr	r3, [pc, #284]	; (8001394 <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d115      	bne.n	80012ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e07f      	b.n	8001386 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d107      	bne.n	800129e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800128e:	4b41      	ldr	r3, [pc, #260]	; (8001394 <HAL_RCC_ClockConfig+0x1c4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d109      	bne.n	80012ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e073      	b.n	8001386 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129e:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <HAL_RCC_ClockConfig+0x1c4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e06b      	b.n	8001386 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ae:	4939      	ldr	r1, [pc, #228]	; (8001394 <HAL_RCC_ClockConfig+0x1c4>)
 80012b0:	4b38      	ldr	r3, [pc, #224]	; (8001394 <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f023 0203 	bic.w	r2, r3, #3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c0:	f7ff f9ea 	bl	8000698 <HAL_GetTick>
 80012c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c6:	e00a      	b.n	80012de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c8:	f7ff f9e6 	bl	8000698 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e053      	b.n	8001386 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012de:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <HAL_RCC_ClockConfig+0x1c4>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 020c 	and.w	r2, r3, #12
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d1eb      	bne.n	80012c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012f0:	4b27      	ldr	r3, [pc, #156]	; (8001390 <HAL_RCC_ClockConfig+0x1c0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0207 	and.w	r2, r3, #7
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d910      	bls.n	8001320 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fe:	4924      	ldr	r1, [pc, #144]	; (8001390 <HAL_RCC_ClockConfig+0x1c0>)
 8001300:	4b23      	ldr	r3, [pc, #140]	; (8001390 <HAL_RCC_ClockConfig+0x1c0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f023 0207 	bic.w	r2, r3, #7
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	4313      	orrs	r3, r2
 800130c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800130e:	4b20      	ldr	r3, [pc, #128]	; (8001390 <HAL_RCC_ClockConfig+0x1c0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0207 	and.w	r2, r3, #7
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	429a      	cmp	r2, r3
 800131a:	d001      	beq.n	8001320 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e032      	b.n	8001386 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b00      	cmp	r3, #0
 800132a:	d008      	beq.n	800133e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800132c:	4919      	ldr	r1, [pc, #100]	; (8001394 <HAL_RCC_ClockConfig+0x1c4>)
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <HAL_RCC_ClockConfig+0x1c4>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	2b00      	cmp	r3, #0
 8001348:	d009      	beq.n	800135e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800134a:	4912      	ldr	r1, [pc, #72]	; (8001394 <HAL_RCC_ClockConfig+0x1c4>)
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	4313      	orrs	r3, r2
 800135c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800135e:	f000 f821 	bl	80013a4 <HAL_RCC_GetSysClockFreq>
 8001362:	4601      	mov	r1, r0
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_RCC_ClockConfig+0x1c4>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <HAL_RCC_ClockConfig+0x1c8>)
 8001370:	5cd3      	ldrb	r3, [r2, r3]
 8001372:	fa21 f303 	lsr.w	r3, r1, r3
 8001376:	4a09      	ldr	r2, [pc, #36]	; (800139c <HAL_RCC_ClockConfig+0x1cc>)
 8001378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_RCC_ClockConfig+0x1d0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f948 	bl	8000614 <HAL_InitTick>

  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40022000 	.word	0x40022000
 8001394:	40021000 	.word	0x40021000
 8001398:	080024cc 	.word	0x080024cc
 800139c:	20000000 	.word	0x20000000
 80013a0:	20000004 	.word	0x20000004

080013a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a4:	b490      	push	{r4, r7}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013aa:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013ac:	1d3c      	adds	r4, r7, #4
 80013ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013b4:	4b28      	ldr	r3, [pc, #160]	; (8001458 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <HAL_RCC_GetSysClockFreq+0xb8>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d002      	beq.n	80013e4 <HAL_RCC_GetSysClockFreq+0x40>
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d003      	beq.n	80013ea <HAL_RCC_GetSysClockFreq+0x46>
 80013e2:	e02d      	b.n	8001440 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013e4:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013e6:	623b      	str	r3, [r7, #32]
      break;
 80013e8:	e02d      	b.n	8001446 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	0c9b      	lsrs	r3, r3, #18
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013f6:	4413      	add	r3, r2
 80013f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d013      	beq.n	8001430 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_RCC_GetSysClockFreq+0xb8>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	0c5b      	lsrs	r3, r3, #17
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001416:	4413      	add	r3, r2
 8001418:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800141c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	4a0f      	ldr	r2, [pc, #60]	; (8001460 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001422:	fb02 f203 	mul.w	r2, r2, r3
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	fbb2 f3f3 	udiv	r3, r2, r3
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
 800142e:	e004      	b.n	800143a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001434:	fb02 f303 	mul.w	r3, r2, r3
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	623b      	str	r3, [r7, #32]
      break;
 800143e:	e002      	b.n	8001446 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001442:	623b      	str	r3, [r7, #32]
      break;
 8001444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001446:	6a3b      	ldr	r3, [r7, #32]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3728      	adds	r7, #40	; 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bc90      	pop	{r4, r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	0800246c 	.word	0x0800246c
 8001458:	0800247c 	.word	0x0800247c
 800145c:	40021000 	.word	0x40021000
 8001460:	007a1200 	.word	0x007a1200
 8001464:	003d0900 	.word	0x003d0900

08001468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800146c:	4b02      	ldr	r3, [pc, #8]	; (8001478 <HAL_RCC_GetHCLKFreq+0x10>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	20000000 	.word	0x20000000

0800147c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001480:	f7ff fff2 	bl	8001468 <HAL_RCC_GetHCLKFreq>
 8001484:	4601      	mov	r1, r0
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	0a1b      	lsrs	r3, r3, #8
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	4a03      	ldr	r2, [pc, #12]	; (80014a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001492:	5cd3      	ldrb	r3, [r2, r3]
 8001494:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021000 	.word	0x40021000
 80014a0:	080024dc 	.word	0x080024dc

080014a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014a8:	f7ff ffde 	bl	8001468 <HAL_RCC_GetHCLKFreq>
 80014ac:	4601      	mov	r1, r0
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	0adb      	lsrs	r3, r3, #11
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	4a03      	ldr	r2, [pc, #12]	; (80014c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014ba:	5cd3      	ldrb	r3, [r2, r3]
 80014bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021000 	.word	0x40021000
 80014c8:	080024dc 	.word	0x080024dc

080014cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <RCC_Delay+0x34>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <RCC_Delay+0x38>)
 80014da:	fba2 2303 	umull	r2, r3, r2, r3
 80014de:	0a5b      	lsrs	r3, r3, #9
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	fb02 f303 	mul.w	r3, r2, r3
 80014e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014e8:	bf00      	nop
  }
  while (Delay --);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1e5a      	subs	r2, r3, #1
 80014ee:	60fa      	str	r2, [r7, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f9      	bne.n	80014e8 <RCC_Delay+0x1c>
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000000 	.word	0x20000000
 8001504:	10624dd3 	.word	0x10624dd3

08001508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e03f      	b.n	800159a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d106      	bne.n	8001534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff f806 	bl	8000540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2224      	movs	r2, #36	; 0x24
 8001538:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	68d2      	ldr	r2, [r2, #12]
 8001546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800154a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 fae5 	bl	8001b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	6912      	ldr	r2, [r2, #16]
 800155c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	6952      	ldr	r2, [r2, #20]
 800156c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6812      	ldr	r2, [r2, #0]
 800157a:	68d2      	ldr	r2, [r2, #12]
 800157c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2220      	movs	r2, #32
 800158c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2220      	movs	r2, #32
 8001594:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b085      	sub	sp, #20
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	4613      	mov	r3, r2
 80015ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b20      	cmp	r3, #32
 80015ba:	d130      	bne.n	800161e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <HAL_UART_Transmit_IT+0x26>
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e029      	b.n	8001620 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d101      	bne.n	80015da <HAL_UART_Transmit_IT+0x38>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e022      	b.n	8001620 <HAL_UART_Transmit_IT+0x7e>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	88fa      	ldrh	r2, [r7, #6]
 80015ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	88fa      	ldrh	r2, [r7, #6]
 80015f2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2221      	movs	r2, #33	; 0x21
 80015fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	68d2      	ldr	r2, [r2, #12]
 8001614:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001618:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e000      	b.n	8001620 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800161e:	2302      	movs	r3, #2
  }
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800162a:	b480      	push	{r7}
 800162c:	b085      	sub	sp, #20
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	4613      	mov	r3, r2
 8001636:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b20      	cmp	r3, #32
 8001642:	d140      	bne.n	80016c6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <HAL_UART_Receive_IT+0x26>
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e039      	b.n	80016c8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800165a:	2b01      	cmp	r3, #1
 800165c:	d101      	bne.n	8001662 <HAL_UART_Receive_IT+0x38>
 800165e:	2302      	movs	r3, #2
 8001660:	e032      	b.n	80016c8 <HAL_UART_Receive_IT+0x9e>
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	88fa      	ldrh	r2, [r7, #6]
 8001674:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	88fa      	ldrh	r2, [r7, #6]
 800167a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2222      	movs	r2, #34	; 0x22
 8001686:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	68d2      	ldr	r2, [r2, #12]
 800169c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016a0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	6952      	ldr	r2, [r2, #20]
 80016ac:	f042 0201 	orr.w	r2, r2, #1
 80016b0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	68d2      	ldr	r2, [r2, #12]
 80016bc:	f042 0220 	orr.w	r2, r2, #32
 80016c0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80016c6:	2302      	movs	r3, #2
  }
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
	...

080016d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10d      	bne.n	8001726 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	2b00      	cmp	r3, #0
 8001712:	d008      	beq.n	8001726 <HAL_UART_IRQHandler+0x52>
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	f003 0320 	and.w	r3, r3, #32
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f97a 	bl	8001a18 <UART_Receive_IT>
      return;
 8001724:	e0cc      	b.n	80018c0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80ab 	beq.w	8001884 <HAL_UART_IRQHandler+0x1b0>
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d105      	bne.n	8001744 <HAL_UART_IRQHandler+0x70>
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 80a0 	beq.w	8001884 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00a      	beq.n	8001764 <HAL_UART_IRQHandler+0x90>
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800175c:	f043 0201 	orr.w	r2, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00a      	beq.n	8001784 <HAL_UART_IRQHandler+0xb0>
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177c:	f043 0202 	orr.w	r2, r3, #2
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00a      	beq.n	80017a4 <HAL_UART_IRQHandler+0xd0>
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179c:	f043 0204 	orr.w	r2, r3, #4
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00a      	beq.n	80017c4 <HAL_UART_IRQHandler+0xf0>
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017bc:	f043 0208 	orr.w	r2, r3, #8
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d078      	beq.n	80018be <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0320 	and.w	r3, r3, #32
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d007      	beq.n	80017e6 <HAL_UART_IRQHandler+0x112>
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	f003 0320 	and.w	r3, r3, #32
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f919 	bl	8001a18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bf14      	ite	ne
 80017f4:	2301      	movne	r3, #1
 80017f6:	2300      	moveq	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <HAL_UART_IRQHandler+0x13a>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d031      	beq.n	8001872 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f865 	bl	80018de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181e:	2b00      	cmp	r3, #0
 8001820:	d023      	beq.n	800186a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	6952      	ldr	r2, [r2, #20]
 800182c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001830:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001836:	2b00      	cmp	r3, #0
 8001838:	d013      	beq.n	8001862 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183e:	4a22      	ldr	r2, [pc, #136]	; (80018c8 <HAL_UART_IRQHandler+0x1f4>)
 8001840:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff f83c 	bl	80008c4 <HAL_DMA_Abort_IT>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d016      	beq.n	8001880 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800185c:	4610      	mov	r0, r2
 800185e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001860:	e00e      	b.n	8001880 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f832 	bl	80018cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001868:	e00a      	b.n	8001880 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f82e 	bl	80018cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001870:	e006      	b.n	8001880 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f82a 	bl	80018cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800187e:	e01e      	b.n	80018be <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001880:	bf00      	nop
    return;
 8001882:	e01c      	b.n	80018be <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188a:	2b00      	cmp	r3, #0
 800188c:	d008      	beq.n	80018a0 <HAL_UART_IRQHandler+0x1cc>
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f851 	bl	8001940 <UART_Transmit_IT>
    return;
 800189e:	e00f      	b.n	80018c0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00a      	beq.n	80018c0 <HAL_UART_IRQHandler+0x1ec>
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f897 	bl	80019e8 <UART_EndTransmit_IT>
    return;
 80018ba:	bf00      	nop
 80018bc:	e000      	b.n	80018c0 <HAL_UART_IRQHandler+0x1ec>
    return;
 80018be:	bf00      	nop
  }
}
 80018c0:	3720      	adds	r7, #32
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	08001919 	.word	0x08001919

080018cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr

080018de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	68d2      	ldr	r2, [r2, #12]
 80018f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80018f4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	6952      	ldr	r2, [r2, #20]
 8001900:	f022 0201 	bic.w	r2, r2, #1
 8001904:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2220      	movs	r2, #32
 800190a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f7ff ffca 	bl	80018cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b21      	cmp	r3, #33	; 0x21
 8001952:	d143      	bne.n	80019dc <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800195c:	d119      	bne.n	8001992 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	8812      	ldrh	r2, [r2, #0]
 800196c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001970:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d105      	bne.n	8001986 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	1c9a      	adds	r2, r3, #2
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	621a      	str	r2, [r3, #32]
 8001984:	e00e      	b.n	80019a4 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	621a      	str	r2, [r3, #32]
 8001990:	e008      	b.n	80019a4 <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	1c58      	adds	r0, r3, #1
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	6208      	str	r0, [r1, #32]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	3b01      	subs	r3, #1
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	4619      	mov	r1, r3
 80019b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10f      	bne.n	80019d8 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	68d2      	ldr	r2, [r2, #12]
 80019c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	68d2      	ldr	r2, [r2, #12]
 80019d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	e000      	b.n	80019de <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80019dc:	2302      	movs	r3, #2
  }
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	68d2      	ldr	r2, [r2, #12]
 80019fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2220      	movs	r2, #32
 8001a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 fc35 	bl	8002278 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b22      	cmp	r3, #34	; 0x22
 8001a2a:	d171      	bne.n	8001b10 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a34:	d123      	bne.n	8001a7e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10e      	bne.n	8001a62 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5a:	1c9a      	adds	r2, r3, #2
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8001a60:	e029      	b.n	8001ab6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a7c:	e01b      	b.n	8001ab6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10a      	bne.n	8001a9c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	1c59      	adds	r1, r3, #1
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6291      	str	r1, [r2, #40]	; 0x28
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	6852      	ldr	r2, [r2, #4]
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]
 8001a9a:	e00c      	b.n	8001ab6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	1c59      	adds	r1, r3, #1
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6291      	str	r1, [r2, #40]	; 0x28
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	6852      	ldr	r2, [r2, #4]
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d120      	bne.n	8001b0c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	68d2      	ldr	r2, [r2, #12]
 8001ad4:	f022 0220 	bic.w	r2, r2, #32
 8001ad8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	68d2      	ldr	r2, [r2, #12]
 8001ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ae8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	6952      	ldr	r2, [r2, #20]
 8001af4:	f022 0201 	bic.w	r2, r2, #1
 8001af8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2220      	movs	r2, #32
 8001afe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 fc04 	bl	8002310 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	e002      	b.n	8001b12 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	e000      	b.n	8001b12 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001b10:	2302      	movs	r3, #2
  }
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	6912      	ldr	r2, [r2, #16]
 8001b2e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68d2      	ldr	r2, [r2, #12]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001b5a:	f023 030c 	bic.w	r3, r3, #12
 8001b5e:	68f9      	ldr	r1, [r7, #12]
 8001b60:	430b      	orrs	r3, r1
 8001b62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	6952      	ldr	r2, [r2, #20]
 8001b6e:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6992      	ldr	r2, [r2, #24]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a52      	ldr	r2, [pc, #328]	; (8001cc8 <UART_SetConfig+0x1ac>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d14e      	bne.n	8001c22 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001b84:	f7ff fc8e 	bl	80014a4 <HAL_RCC_GetPCLK2Freq>
 8001b88:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6819      	ldr	r1, [r3, #0]
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	009a      	lsls	r2, r3, #2
 8001b98:	441a      	add	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba4:	4a49      	ldr	r2, [pc, #292]	; (8001ccc <UART_SetConfig+0x1b0>)
 8001ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	0118      	lsls	r0, r3, #4
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009a      	lsls	r2, r3, #2
 8001bb8:	441a      	add	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bc4:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <UART_SetConfig+0x1b0>)
 8001bc6:	fba3 4302 	umull	r4, r3, r3, r2
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	2464      	movs	r4, #100	; 0x64
 8001bce:	fb04 f303 	mul.w	r3, r4, r3
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	3332      	adds	r3, #50	; 0x32
 8001bd8:	4a3c      	ldr	r2, [pc, #240]	; (8001ccc <UART_SetConfig+0x1b0>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001be4:	4418      	add	r0, r3
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	009a      	lsls	r2, r3, #2
 8001bf0:	441a      	add	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bfc:	4b33      	ldr	r3, [pc, #204]	; (8001ccc <UART_SetConfig+0x1b0>)
 8001bfe:	fba3 4302 	umull	r4, r3, r3, r2
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	2464      	movs	r4, #100	; 0x64
 8001c06:	fb04 f303 	mul.w	r3, r4, r3
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	3332      	adds	r3, #50	; 0x32
 8001c10:	4a2e      	ldr	r2, [pc, #184]	; (8001ccc <UART_SetConfig+0x1b0>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	4403      	add	r3, r0
 8001c1e:	608b      	str	r3, [r1, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001c20:	e04d      	b.n	8001cbe <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c22:	f7ff fc2b 	bl	800147c <HAL_RCC_GetPCLK1Freq>
 8001c26:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6819      	ldr	r1, [r3, #0]
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	009a      	lsls	r2, r3, #2
 8001c36:	441a      	add	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	4a22      	ldr	r2, [pc, #136]	; (8001ccc <UART_SetConfig+0x1b0>)
 8001c44:	fba2 2303 	umull	r2, r3, r2, r3
 8001c48:	095b      	lsrs	r3, r3, #5
 8001c4a:	0118      	lsls	r0, r3, #4
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	009a      	lsls	r2, r3, #2
 8001c56:	441a      	add	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c62:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <UART_SetConfig+0x1b0>)
 8001c64:	fba3 4302 	umull	r4, r3, r3, r2
 8001c68:	095b      	lsrs	r3, r3, #5
 8001c6a:	2464      	movs	r4, #100	; 0x64
 8001c6c:	fb04 f303 	mul.w	r3, r4, r3
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	3332      	adds	r3, #50	; 0x32
 8001c76:	4a15      	ldr	r2, [pc, #84]	; (8001ccc <UART_SetConfig+0x1b0>)
 8001c78:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7c:	095b      	lsrs	r3, r3, #5
 8001c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c82:	4418      	add	r0, r3
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009a      	lsls	r2, r3, #2
 8001c8e:	441a      	add	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <UART_SetConfig+0x1b0>)
 8001c9c:	fba3 4302 	umull	r4, r3, r3, r2
 8001ca0:	095b      	lsrs	r3, r3, #5
 8001ca2:	2464      	movs	r4, #100	; 0x64
 8001ca4:	fb04 f303 	mul.w	r3, r4, r3
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	3332      	adds	r3, #50	; 0x32
 8001cae:	4a07      	ldr	r2, [pc, #28]	; (8001ccc <UART_SetConfig+0x1b0>)
 8001cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb4:	095b      	lsrs	r3, r3, #5
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	4403      	add	r3, r0
 8001cbc:	608b      	str	r3, [r1, #8]
}
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd90      	pop	{r4, r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	51eb851f 	.word	0x51eb851f

08001cd0 <assert_failed>:
    }

#else
    // empty function !
    void assert_failed(uint8_t * file, uint32_t line) 
    {
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
        (void)file;
        (void)line;
    }
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <_2nd_complement>:
 * @param num 
 */
static void _2nd_complement(int32_t* num);


static void _2nd_complement(int32_t* num) {
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	int32_t temp = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
	temp = (~(*num) + 1); 
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	425b      	negs	r3, r3
 8001cf6:	60fb      	str	r3, [r7, #12]
	*num = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	601a      	str	r2, [r3, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <num2str>:


uint8_t num2str(int32_t num_in, uint8_t *const pStr_out) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	77fb      	strb	r3, [r7, #31]
	uint8_t i2 = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	77bb      	strb	r3, [r7, #30]
	uint8_t num_cnt = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	777b      	strb	r3, [r7, #29]
	uint8_t sign_offset = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	773b      	strb	r3, [r7, #28]
	uint8_t temp_str[15];
	
	if (num_in == 0){
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d109      	bne.n	8001d3c <num2str+0x34>
		pStr_out[0] = '0';
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2230      	movs	r2, #48	; 0x30
 8001d2c:	701a      	strb	r2, [r3, #0]
		pStr_out[1] = 0; // zero termination
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	3301      	adds	r3, #1
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
        num_cnt = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	777b      	strb	r3, [r7, #29]
 8001d3a:	e053      	b.n	8001de4 <num2str+0xdc>
	} else {

		if (num_in < 0)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	da08      	bge.n	8001d54 <num2str+0x4c>
		{
			pStr_out[0] = '-';
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	222d      	movs	r2, #45	; 0x2d
 8001d46:	701a      	strb	r2, [r3, #0]
			sign_offset = 1;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	773b      	strb	r3, [r7, #28]
			_2nd_complement(&num_in);
 8001d4c:	1d3b      	adds	r3, r7, #4
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ffc8 	bl	8001ce4 <_2nd_complement>
		}
		for (i = 0; num_in > 0; i++)
 8001d54:	2300      	movs	r3, #0
 8001d56:	77fb      	strb	r3, [r7, #31]
 8001d58:	e01f      	b.n	8001d9a <num2str+0x92>
		{
            /* @todo try to replace % operator (assumsion is that this is slow on 8bit) */
			temp_str[i] = (uint8_t)((num_in % 10) + '0'); // ascii shift for numbers 0 -> 48(dec)
 8001d5a:	7ff8      	ldrb	r0, [r7, #31]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	4b25      	ldr	r3, [pc, #148]	; (8001df4 <num2str+0xec>)
 8001d60:	fb83 1302 	smull	r1, r3, r3, r2
 8001d64:	1099      	asrs	r1, r3, #2
 8001d66:	17d3      	asrs	r3, r2, #31
 8001d68:	1ac9      	subs	r1, r1, r3
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	1ad1      	subs	r1, r2, r3
 8001d74:	b2cb      	uxtb	r3, r1
 8001d76:	3330      	adds	r3, #48	; 0x30
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	f107 0320 	add.w	r3, r7, #32
 8001d7e:	4403      	add	r3, r0
 8001d80:	f803 2c14 	strb.w	r2, [r3, #-20]
			num_in = num_in / 10;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <num2str+0xec>)
 8001d88:	fb82 1203 	smull	r1, r2, r2, r3
 8001d8c:	1092      	asrs	r2, r2, #2
 8001d8e:	17db      	asrs	r3, r3, #31
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	607b      	str	r3, [r7, #4]
		for (i = 0; num_in > 0; i++)
 8001d94:	7ffb      	ldrb	r3, [r7, #31]
 8001d96:	3301      	adds	r3, #1
 8001d98:	77fb      	strb	r3, [r7, #31]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	dcdc      	bgt.n	8001d5a <num2str+0x52>
		}
		num_cnt = i;
 8001da0:	7ffb      	ldrb	r3, [r7, #31]
 8001da2:	777b      	strb	r3, [r7, #29]
		i += sign_offset;
 8001da4:	7ffa      	ldrb	r2, [r7, #31]
 8001da6:	7f3b      	ldrb	r3, [r7, #28]
 8001da8:	4413      	add	r3, r2
 8001daa:	77fb      	strb	r3, [r7, #31]
		// add null termination at the end of string
		pStr_out[i] = 0;
 8001dac:	7ffb      	ldrb	r3, [r7, #31]
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
		// revers array
		for (i2 = 0; i2 < num_cnt; i2++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	77bb      	strb	r3, [r7, #30]
 8001dba:	e00f      	b.n	8001ddc <num2str+0xd4>
		{
			i--;
 8001dbc:	7ffb      	ldrb	r3, [r7, #31]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	77fb      	strb	r3, [r7, #31]
			pStr_out[i] = temp_str[i2];
 8001dc2:	7ffb      	ldrb	r3, [r7, #31]
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	7fba      	ldrb	r2, [r7, #30]
 8001dca:	f107 0120 	add.w	r1, r7, #32
 8001dce:	440a      	add	r2, r1
 8001dd0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001dd4:	701a      	strb	r2, [r3, #0]
		for (i2 = 0; i2 < num_cnt; i2++)
 8001dd6:	7fbb      	ldrb	r3, [r7, #30]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	77bb      	strb	r3, [r7, #30]
 8001ddc:	7fba      	ldrb	r2, [r7, #30]
 8001dde:	7f7b      	ldrb	r3, [r7, #29]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d3eb      	bcc.n	8001dbc <num2str+0xb4>
		}
	}

    /* return string size */
	return (uint8_t)(num_cnt + sign_offset);
 8001de4:	7f7a      	ldrb	r2, [r7, #29]
 8001de6:	7f3b      	ldrb	r3, [r7, #28]
 8001de8:	4413      	add	r3, r2
 8001dea:	b2db      	uxtb	r3, r3
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3720      	adds	r7, #32
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	66666667 	.word	0x66666667

08001df8 <RingBuff_init>:
    &flush_method
};

/* constructor */
void RingBuff_init(ringBuff_t *pThis, ringBuff_data_t *pData, size_t dataSize)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
    uint16_t loop_itr = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	82fb      	strh	r3, [r7, #22]

    pThis->_head = 0x00;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	801a      	strh	r2, [r3, #0]
    pThis->_tail = 0x00;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	805a      	strh	r2, [r3, #2]
    pThis->_pData = pData;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	605a      	str	r2, [r3, #4]
    pThis->_dataSize = dataSize;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	811a      	strh	r2, [r3, #8]
    /* initialize ring buffer to 0 */
    for (loop_itr = 0; loop_itr < dataSize; ++loop_itr)
 8001e22:	2300      	movs	r3, #0
 8001e24:	82fb      	strh	r3, [r7, #22]
 8001e26:	e008      	b.n	8001e3a <RingBuff_init+0x42>
    {
        pThis->_pData[loop_itr] = 0x00; 
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	8afb      	ldrh	r3, [r7, #22]
 8001e2e:	4413      	add	r3, r2
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
    for (loop_itr = 0; loop_itr < dataSize; ++loop_itr)
 8001e34:	8afb      	ldrh	r3, [r7, #22]
 8001e36:	3301      	adds	r3, #1
 8001e38:	82fb      	strh	r3, [r7, #22]
 8001e3a:	8afa      	ldrh	r2, [r7, #22]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d3f2      	bcc.n	8001e28 <RingBuff_init+0x30>
        //*(pThis->_pData + loop_itr) = 0x00;
    }
}
 8001e42:	bf00      	nop
 8001e44:	371c      	adds	r7, #28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <push_method>:

//=====================================================================================
/* methods implementation */

static void push_method(ringBuff_t *pThis, ringBuff_data_t newData)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
    /* this "magic" make line buffer into ring buffer */
    uint16_t new_head = (pThis->_head + 1) & (pThis->_dataSize - 1); 
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	b21a      	sxth	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	891b      	ldrh	r3, [r3, #8]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	b21b      	sxth	r3, r3
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	b21b      	sxth	r3, r3
 8001e70:	81fb      	strh	r3, [r7, #14]

    if(new_head != pThis->_tail)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	885b      	ldrh	r3, [r3, #2]
 8001e76:	89fa      	ldrh	r2, [r7, #14]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d00a      	beq.n	8001e92 <push_method+0x46>
    {
        pThis->_pData[pThis->_head] = newData;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	8812      	ldrh	r2, [r2, #0]
 8001e84:	4413      	add	r3, r2
 8001e86:	78fa      	ldrb	r2, [r7, #3]
 8001e88:	701a      	strb	r2, [r3, #0]
        pThis->_head = new_head;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	89fa      	ldrh	r2, [r7, #14]
 8001e8e:	801a      	strh	r2, [r3, #0]
    else
    {
        // ERROR, can't override buffer
        assert(0);
    }  
}
 8001e90:	e003      	b.n	8001e9a <push_method+0x4e>
        assert(0);
 8001e92:	2150      	movs	r1, #80	; 0x50
 8001e94:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <push_method+0x58>)
 8001e96:	f7ff ff1b 	bl	8001cd0 <assert_failed>
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	08002480 	.word	0x08002480

08001ea8 <get_method>:

static ringBuff_data_t get_method(ringBuff_t *pThis)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	ringBuff_data_t ret_value = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]

	if (pThis->_tail != pThis->_head)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	885a      	ldrh	r2, [r3, #2]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d016      	beq.n	8001eee <get_method+0x46>
	{
		ret_value = pThis->_pData[pThis->_tail];
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	8852      	ldrh	r2, [r2, #2]
 8001ec8:	4413      	add	r3, r2
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	73fb      	strb	r3, [r7, #15]
        /* this "magic" make line buffer into ring buffer */
		pThis->_tail = (pThis->_tail + 1) & (pThis->_dataSize - 1); 
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	885b      	ldrh	r3, [r3, #2]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	b21a      	sxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	891b      	ldrh	r3, [r3, #8]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	b21b      	sxth	r3, r3
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	805a      	strh	r2, [r3, #2]
 8001eec:	e001      	b.n	8001ef2 <get_method+0x4a>
	} else {
		ret_value = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
	}
	return ret_value;
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <get_nBytes_method>:

static uint16_t get_nBytes_method(ringBuff_t *pThis)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
	return((pThis->_head - pThis->_tail) & (pThis->_dataSize - 1));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	881a      	ldrh	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	885b      	ldrh	r3, [r3, #2]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	b21a      	sxth	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	891b      	ldrh	r3, [r3, #8]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	4013      	ands	r3, r2
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	b29b      	uxth	r3, r3
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <flush_method>:

static void	flush_method(ringBuff_t *pThis){
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
	pThis->_head = pThis->_tail;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	885a      	ldrh	r2, [r3, #2]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	801a      	strh	r2, [r3, #0]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <Serial_init>:
    &Rx_lastTime
};
//=========================================================

/* constructor */
void Serial_init(serial_ctrl_desc_t *p_Serial_ctrl_desc, void *p_HW_handle) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]

    assert(p_Serial_ctrl_desc != NULL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d103      	bne.n	8001f60 <Serial_init+0x18>
 8001f58:	21c2      	movs	r1, #194	; 0xc2
 8001f5a:	4810      	ldr	r0, [pc, #64]	; (8001f9c <Serial_init+0x54>)
 8001f5c:	f7ff feb8 	bl	8001cd0 <assert_failed>
    assert(p_HW_handle != NULL);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d103      	bne.n	8001f6e <Serial_init+0x26>
 8001f66:	21c3      	movs	r1, #195	; 0xc3
 8001f68:	480c      	ldr	r0, [pc, #48]	; (8001f9c <Serial_init+0x54>)
 8001f6a:	f7ff feb1 	bl	8001cd0 <assert_failed>

    RingBuff_init(p_Serial_ctrl_desc->p_xBuff_Tx, p_Serial_ctrl_desc->p_data_Tx, BUFF_0_TX_SIZE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6858      	ldr	r0, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2240      	movs	r2, #64	; 0x40
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f7ff ff3d 	bl	8001df8 <RingBuff_init>
    RingBuff_init(p_Serial_ctrl_desc->p_xBuff_Rx, p_Serial_ctrl_desc->p_data_Rx, BUFF_0_RX_SIZE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68d8      	ldr	r0, [r3, #12]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	2240      	movs	r2, #64	; 0x40
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7ff ff35 	bl	8001df8 <RingBuff_init>

    p_Serial_ctrl_desc->p_uartHW = (UART_HandleTypeDef*)p_HW_handle;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	601a      	str	r2, [r3, #0]
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	080024b4 	.word	0x080024b4

08001fa0 <print>:


//=========================================================
/* methods implementation */

void print(serial_ctrl_desc_t *p_ctrl_desc, const uint8_t * const pStr){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
    /* write to ring buffer and start send if not currently not active */
    uint_fast8_t i = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
    static uint_fast8_t byte2send;

    while (pStr[i] != 0x00) // const c-strings are '\0'(0x00) terminated 
 8001fae:	e00b      	b.n	8001fc8 <print+0x28>
    {
        // write to buffer
        RingBuff.push(p_ctrl_desc->p_xBuff_Tx, pStr[i++]);
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <print+0x84>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6858      	ldr	r0, [r3, #4]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1c59      	adds	r1, r3, #1
 8001fbc:	60f9      	str	r1, [r7, #12]
 8001fbe:	6839      	ldr	r1, [r7, #0]
 8001fc0:	440b      	add	r3, r1
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4790      	blx	r2
    while (pStr[i] != 0x00) // const c-strings are '\0'(0x00) terminated 
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4413      	add	r3, r2
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1ed      	bne.n	8001fb0 <print+0x10>
    }
        
    if (p_ctrl_desc->Tx_active_F == 0)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	7d9b      	ldrb	r3, [r3, #22]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d11f      	bne.n	800201c <print+0x7c>
    {
        // initiate send
        byte2send = RingBuff.get(p_ctrl_desc->p_xBuff_Tx);
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <print+0x84>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6852      	ldr	r2, [r2, #4]
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4798      	blx	r3
 8001fe8:	4603      	mov	r3, r0
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <print+0x88>)
 8001fee:	601a      	str	r2, [r3, #0]
        HAL_status = HAL_UART_Transmit_IT(p_ctrl_desc->p_uartHW, &byte2send, 1);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	490c      	ldr	r1, [pc, #48]	; (8002028 <print+0x88>)
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fad2 	bl	80015a2 <HAL_UART_Transmit_IT>
 8001ffe:	4603      	mov	r3, r0
 8002000:	461a      	mov	r2, r3
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <print+0x8c>)
 8002004:	701a      	strb	r2, [r3, #0]
        if (HAL_status != HAL_OK)
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <print+0x8c>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <print+0x76>
        {
            assert(0);
 800200e:	21e1      	movs	r1, #225	; 0xe1
 8002010:	4807      	ldr	r0, [pc, #28]	; (8002030 <print+0x90>)
 8002012:	f7ff fe5d 	bl	8001cd0 <assert_failed>
        }
        p_ctrl_desc->Tx_active_F = 1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	759a      	strb	r2, [r3, #22]
    }
}
 800201c:	bf00      	nop
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	080024e4 	.word	0x080024e4
 8002028:	200000d4 	.word	0x200000d4
 800202c:	200000d2 	.word	0x200000d2
 8002030:	080024b4 	.word	0x080024b4

08002034 <println>:

void println(serial_ctrl_desc_t *p_ctrl_desc, const uint8_t * const pStr){
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
    print(p_ctrl_desc, pStr);
 800203e:	6839      	ldr	r1, [r7, #0]
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ffad 	bl	8001fa0 <print>
    print(p_ctrl_desc, "\n");
 8002046:	4904      	ldr	r1, [pc, #16]	; (8002058 <println+0x24>)
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ffa9 	bl	8001fa0 <print>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	080024c8 	.word	0x080024c8

0800205c <write>:

void write(serial_ctrl_desc_t *p_ctrl_desc, uint8_t *const pSurce, size_t size){
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
    /* write to ring buffer and start send if not currently not active */
    uint_fast8_t i = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
    static uint_fast8_t byte2send;

    while (i < size) // const c-strings are '\0'(0x00) terminated 
 800206c:	e00b      	b.n	8002086 <write+0x2a>
    {
        // write to buffer
        RingBuff.push(p_ctrl_desc->p_xBuff_Tx, pSurce[i++]);
 800206e:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <write+0x84>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6858      	ldr	r0, [r3, #4]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	1c59      	adds	r1, r3, #1
 800207a:	6179      	str	r1, [r7, #20]
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	440b      	add	r3, r1
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	4619      	mov	r1, r3
 8002084:	4790      	blx	r2
    while (i < size) // const c-strings are '\0'(0x00) terminated 
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	429a      	cmp	r2, r3
 800208c:	d3ef      	bcc.n	800206e <write+0x12>
    }
        
    if (p_ctrl_desc->Tx_active_F == 0)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	7d9b      	ldrb	r3, [r3, #22]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d11f      	bne.n	80020d6 <write+0x7a>
    {
        // initiate send
        byte2send = RingBuff.get(p_ctrl_desc->p_xBuff_Tx);
 8002096:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <write+0x84>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	6852      	ldr	r2, [r2, #4]
 800209e:	4610      	mov	r0, r2
 80020a0:	4798      	blx	r3
 80020a2:	4603      	mov	r3, r0
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <write+0x88>)
 80020a8:	601a      	str	r2, [r3, #0]
        HAL_status = HAL_UART_Transmit_IT(p_ctrl_desc->p_uartHW, &byte2send, 1);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2201      	movs	r2, #1
 80020b0:	490c      	ldr	r1, [pc, #48]	; (80020e4 <write+0x88>)
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fa75 	bl	80015a2 <HAL_UART_Transmit_IT>
 80020b8:	4603      	mov	r3, r0
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <write+0x8c>)
 80020be:	701a      	strb	r2, [r3, #0]
        if (HAL_status != HAL_OK)
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <write+0x8c>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <write+0x74>
        {
            assert(0);
 80020c8:	21fe      	movs	r1, #254	; 0xfe
 80020ca:	4808      	ldr	r0, [pc, #32]	; (80020ec <write+0x90>)
 80020cc:	f7ff fe00 	bl	8001cd0 <assert_failed>
        }
        p_ctrl_desc->Tx_active_F = 1;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	759a      	strb	r2, [r3, #22]
    }
}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	080024e4 	.word	0x080024e4
 80020e4:	200000d8 	.word	0x200000d8
 80020e8:	200000d2 	.word	0x200000d2
 80020ec:	080024b4 	.word	0x080024b4

080020f0 <isData>:


uint16_t isData (serial_ctrl_desc_t *p_ctrl_desc) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
    uint_fast16_t data_cnt = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
    data_cnt = RingBuff.get_nBytes(p_ctrl_desc->p_xBuff_Rx);
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <isData+0x28>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	68d2      	ldr	r2, [r2, #12]
 8002104:	4610      	mov	r0, r2
 8002106:	4798      	blx	r3
 8002108:	4603      	mov	r3, r0
 800210a:	60fb      	str	r3, [r7, #12]
    return (data_cnt);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	b29b      	uxth	r3, r3
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	080024e4 	.word	0x080024e4

0800211c <flush>:

void flush(serial_ctrl_desc_t *p_ctrl_desc) {
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
    RingBuff.flush(p_ctrl_desc->p_xBuff_Rx);
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <flush+0x1c>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68d2      	ldr	r2, [r2, #12]
 800212c:	4610      	mov	r0, r2
 800212e:	4798      	blx	r3
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	080024e4 	.word	0x080024e4

0800213c <Rx_lastTime>:

uint32_t Rx_lastTime(serial_ctrl_desc_t *p_ctrl_desc){
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
    return p_ctrl_desc->last_tm;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <read_enable>:

void read_enable(serial_ctrl_desc_t *p_ctrl_desc) {
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
    /* start read */
    if(p_ctrl_desc->Rx_active_F == 0) {
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	7d5b      	ldrb	r3, [r3, #21]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10a      	bne.n	8002178 <read_enable+0x26>
        HAL_UART_Receive_IT(p_ctrl_desc->p_uartHW, &p_ctrl_desc->byteTemp_Rx, 1);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3314      	adds	r3, #20
 800216a:	2201      	movs	r2, #1
 800216c:	4619      	mov	r1, r3
 800216e:	f7ff fa5c 	bl	800162a <HAL_UART_Receive_IT>
        p_ctrl_desc->Rx_active_F = 1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	755a      	strb	r2, [r3, #21]
    }
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <read>:



uint16_t read(serial_ctrl_desc_t *p_ctrl_desc, uint8_t *pDest, uint8_t nBytes) {
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	4613      	mov	r3, r2
 800218c:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	75fb      	strb	r3, [r7, #23]
    uint8_t byte_cnt = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	75bb      	strb	r3, [r7, #22]
    
    for (i = 0; i < nBytes; ++i)
 8002196:	2300      	movs	r3, #0
 8002198:	75fb      	strb	r3, [r7, #23]
 800219a:	e018      	b.n	80021ce <read+0x4e>
    {
        byte_cnt = RingBuff.get_nBytes(p_ctrl_desc->p_xBuff_Rx);	
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <read+0x68>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	68d2      	ldr	r2, [r2, #12]
 80021a4:	4610      	mov	r0, r2
 80021a6:	4798      	blx	r3
 80021a8:	4603      	mov	r3, r0
 80021aa:	75bb      	strb	r3, [r7, #22]
        if(byte_cnt > 0) {
 80021ac:	7dbb      	ldrb	r3, [r7, #22]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d012      	beq.n	80021d8 <read+0x58>
            pDest[i] = RingBuff.get(p_ctrl_desc->p_xBuff_Rx);
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	18d4      	adds	r4, r2, r3
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <read+0x68>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	68d2      	ldr	r2, [r2, #12]
 80021c0:	4610      	mov	r0, r2
 80021c2:	4798      	blx	r3
 80021c4:	4603      	mov	r3, r0
 80021c6:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < nBytes; ++i)
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
 80021ca:	3301      	adds	r3, #1
 80021cc:	75fb      	strb	r3, [r7, #23]
 80021ce:	7dfa      	ldrb	r2, [r7, #23]
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d3e2      	bcc.n	800219c <read+0x1c>
 80021d6:	e000      	b.n	80021da <read+0x5a>
        }else {
            /* buffer empty */
            break;
 80021d8:	bf00      	nop
        }
    }
    return i;
 80021da:	7dfb      	ldrb	r3, [r7, #23]
 80021dc:	b29b      	uxth	r3, r3
}
 80021de:	4618      	mov	r0, r3
 80021e0:	371c      	adds	r7, #28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd90      	pop	{r4, r7, pc}
 80021e6:	bf00      	nop
 80021e8:	080024e4 	.word	0x080024e4

080021ec <readUntil>:

uint16_t readUntil(serial_ctrl_desc_t *p_ctrl_desc, uint8_t *pDest, uint8_t nBytes, uint8_t terminate_chr) {
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	4611      	mov	r1, r2
 80021f8:	461a      	mov	r2, r3
 80021fa:	460b      	mov	r3, r1
 80021fc:	71fb      	strb	r3, [r7, #7]
 80021fe:	4613      	mov	r3, r2
 8002200:	71bb      	strb	r3, [r7, #6]
    uint8_t i = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	75fb      	strb	r3, [r7, #23]
    uint8_t byte_cnt = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	75bb      	strb	r3, [r7, #22]
    
    for (i = 0; i < nBytes; ++i)
 800220a:	2300      	movs	r3, #0
 800220c:	75fb      	strb	r3, [r7, #23]
 800220e:	e025      	b.n	800225c <readUntil+0x70>
    {
        byte_cnt = RingBuff.get_nBytes(p_ctrl_desc->p_xBuff_Rx);	
 8002210:	4b18      	ldr	r3, [pc, #96]	; (8002274 <readUntil+0x88>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	68d2      	ldr	r2, [r2, #12]
 8002218:	4610      	mov	r0, r2
 800221a:	4798      	blx	r3
 800221c:	4603      	mov	r3, r0
 800221e:	75bb      	strb	r3, [r7, #22]
        if(byte_cnt > 0) {
 8002220:	7dbb      	ldrb	r3, [r7, #22]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d01f      	beq.n	8002266 <readUntil+0x7a>
            pDest[i] = RingBuff.get(p_ctrl_desc->p_xBuff_Rx);
 8002226:	7dfb      	ldrb	r3, [r7, #23]
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	18d4      	adds	r4, r2, r3
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <readUntil+0x88>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	68d2      	ldr	r2, [r2, #12]
 8002234:	4610      	mov	r0, r2
 8002236:	4798      	blx	r3
 8002238:	4603      	mov	r3, r0
 800223a:	7023      	strb	r3, [r4, #0]
            if(pDest[i] == terminate_chr) {
 800223c:	7dfb      	ldrb	r3, [r7, #23]
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	4413      	add	r3, r2
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	79ba      	ldrb	r2, [r7, #6]
 8002246:	429a      	cmp	r2, r3
 8002248:	d105      	bne.n	8002256 <readUntil+0x6a>
                /* replace termination character with 0x00 termination */
                pDest[i] = 0x00;
 800224a:	7dfb      	ldrb	r3, [r7, #23]
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	4413      	add	r3, r2
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
                break;
 8002254:	e008      	b.n	8002268 <readUntil+0x7c>
    for (i = 0; i < nBytes; ++i)
 8002256:	7dfb      	ldrb	r3, [r7, #23]
 8002258:	3301      	adds	r3, #1
 800225a:	75fb      	strb	r3, [r7, #23]
 800225c:	7dfa      	ldrb	r2, [r7, #23]
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	429a      	cmp	r2, r3
 8002262:	d3d5      	bcc.n	8002210 <readUntil+0x24>
 8002264:	e000      	b.n	8002268 <readUntil+0x7c>
            }
        }else {
            /* buffer empty */
            break;
 8002266:	bf00      	nop
        }
    }
    return i;
 8002268:	7dfb      	ldrb	r3, [r7, #23]
 800226a:	b29b      	uxth	r3, r3
}
 800226c:	4618      	mov	r0, r3
 800226e:	371c      	adds	r7, #28
 8002270:	46bd      	mov	sp, r7
 8002272:	bd90      	pop	{r4, r7, pc}
 8002274:	080024e4 	.word	0x080024e4

08002278 <HAL_UART_TxCpltCallback>:
//=========================================================

/* called from HAL leyer interrupt */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
    /* this callback function could run ring buffer to handle multiple messages */ 
    serial_ctrl_desc_t *p_serial;
    static uint_fast8_t byte2send;

    if(serial_0.p_uartHW == huart) {
 8002280:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <HAL_UART_TxCpltCallback+0x84>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	429a      	cmp	r2, r3
 8002288:	d101      	bne.n	800228e <HAL_UART_TxCpltCallback+0x16>
        p_serial = &serial_0;
 800228a:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <HAL_UART_TxCpltCallback+0x84>)
 800228c:	60fb      	str	r3, [r7, #12]
        else if(serial_2.p_uartHW == huart){
            p_serial = &serial_2;
        }
    #endif

    assert(p_serial != NULL);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d104      	bne.n	800229e <HAL_UART_TxCpltCallback+0x26>
 8002294:	f240 1159 	movw	r1, #345	; 0x159
 8002298:	4819      	ldr	r0, [pc, #100]	; (8002300 <HAL_UART_TxCpltCallback+0x88>)
 800229a:	f7ff fd19 	bl	8001cd0 <assert_failed>

    if(RingBuff.get_nBytes(p_serial->p_xBuff_Tx) > 0) {
 800229e:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_UART_TxCpltCallback+0x8c>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	6852      	ldr	r2, [r2, #4]
 80022a6:	4610      	mov	r0, r2
 80022a8:	4798      	blx	r3
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d01e      	beq.n	80022ee <HAL_UART_TxCpltCallback+0x76>

        byte2send = RingBuff.get(p_serial->p_xBuff_Tx);
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_UART_TxCpltCallback+0x8c>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	6852      	ldr	r2, [r2, #4]
 80022b8:	4610      	mov	r0, r2
 80022ba:	4798      	blx	r3
 80022bc:	4603      	mov	r3, r0
 80022be:	461a      	mov	r2, r3
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_UART_TxCpltCallback+0x90>)
 80022c2:	601a      	str	r2, [r3, #0]
        HAL_status = HAL_UART_Transmit_IT(p_serial->p_uartHW, &byte2send, 1);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2201      	movs	r2, #1
 80022ca:	490f      	ldr	r1, [pc, #60]	; (8002308 <HAL_UART_TxCpltCallback+0x90>)
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff f968 	bl	80015a2 <HAL_UART_Transmit_IT>
 80022d2:	4603      	mov	r3, r0
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b0d      	ldr	r3, [pc, #52]	; (800230c <HAL_UART_TxCpltCallback+0x94>)
 80022d8:	701a      	strb	r2, [r3, #0]
        if (HAL_status != HAL_OK)
 80022da:	4b0c      	ldr	r3, [pc, #48]	; (800230c <HAL_UART_TxCpltCallback+0x94>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d008      	beq.n	80022f4 <HAL_UART_TxCpltCallback+0x7c>
        {
            assert(0);
 80022e2:	f240 1161 	movw	r1, #353	; 0x161
 80022e6:	4806      	ldr	r0, [pc, #24]	; (8002300 <HAL_UART_TxCpltCallback+0x88>)
 80022e8:	f7ff fcf2 	bl	8001cd0 <assert_failed>
        }
    }else {
        /* no more data to send */
        p_serial->Tx_active_F = 0;
    }
}
 80022ec:	e002      	b.n	80022f4 <HAL_UART_TxCpltCallback+0x7c>
        p_serial->Tx_active_F = 0;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	759a      	strb	r2, [r3, #22]
}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	2000000c 	.word	0x2000000c
 8002300:	080024b4 	.word	0x080024b4
 8002304:	080024e4 	.word	0x080024e4
 8002308:	200000dc 	.word	0x200000dc
 800230c:	200000d2 	.word	0x200000d2

08002310 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
    serial_ctrl_desc_t *p_serial;

    if(serial_0.p_uartHW == huart) {
 8002318:	4b13      	ldr	r3, [pc, #76]	; (8002368 <HAL_UART_RxCpltCallback+0x58>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	429a      	cmp	r2, r3
 8002320:	d101      	bne.n	8002326 <HAL_UART_RxCpltCallback+0x16>
        p_serial = &serial_0;
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_UART_RxCpltCallback+0x58>)
 8002324:	60fb      	str	r3, [r7, #12]
        else if(serial_2.p_uartHW == huart){
            p_serial = &serial_2;
        }
    #endif

    assert(p_serial != NULL);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d104      	bne.n	8002336 <HAL_UART_RxCpltCallback+0x26>
 800232c:	f240 117b 	movw	r1, #379	; 0x17b
 8002330:	480e      	ldr	r0, [pc, #56]	; (800236c <HAL_UART_RxCpltCallback+0x5c>)
 8002332:	f7ff fccd 	bl	8001cd0 <assert_failed>
    /* save received byte into ringBuffer */
    RingBuff.push(p_serial->p_xBuff_Rx, p_serial->byteTemp_Rx);
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <HAL_UART_RxCpltCallback+0x60>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	68d0      	ldr	r0, [r2, #12]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	7d12      	ldrb	r2, [r2, #20]
 8002342:	4611      	mov	r1, r2
 8002344:	4798      	blx	r3

    serial_0.last_tm = HAL_GetTick();
 8002346:	f7fe f9a7 	bl	8000698 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_UART_RxCpltCallback+0x58>)
 800234e:	619a      	str	r2, [r3, #24]

    /* reenable Rx */
    HAL_UART_Receive_IT(p_serial->p_uartHW, &p_serial->byteTemp_Rx, 1);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3314      	adds	r3, #20
 8002358:	2201      	movs	r2, #1
 800235a:	4619      	mov	r1, r3
 800235c:	f7ff f965 	bl	800162a <HAL_UART_Receive_IT>
}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	2000000c 	.word	0x2000000c
 800236c:	080024b4 	.word	0x080024b4
 8002370:	080024e4 	.word	0x080024e4

08002374 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002374:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002376:	e003      	b.n	8002380 <LoopCopyDataInit>

08002378 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800237a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800237c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800237e:	3104      	adds	r1, #4

08002380 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002380:	480a      	ldr	r0, [pc, #40]	; (80023ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002384:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002386:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002388:	d3f6      	bcc.n	8002378 <CopyDataInit>
  ldr r2, =_sbss
 800238a:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800238c:	e002      	b.n	8002394 <LoopFillZerobss>

0800238e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800238e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002390:	f842 3b04 	str.w	r3, [r2], #4

08002394 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002396:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002398:	d3f9      	bcc.n	800238e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800239a:	f7fe f873 	bl	8000484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800239e:	f000 f80f 	bl	80023c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023a2:	f7fd ff1b 	bl	80001dc <main>
  bx lr
 80023a6:	4770      	bx	lr
  ldr r3, =_sidata
 80023a8:	080024fc 	.word	0x080024fc
  ldr r0, =_sdata
 80023ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80023b0:	2000004c 	.word	0x2000004c
  ldr r2, =_sbss
 80023b4:	2000004c 	.word	0x2000004c
  ldr r3, = _ebss
 80023b8:	200001bc 	.word	0x200001bc

080023bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023bc:	e7fe      	b.n	80023bc <ADC1_2_IRQHandler>
	...

080023c0 <__libc_init_array>:
 80023c0:	b570      	push	{r4, r5, r6, lr}
 80023c2:	2500      	movs	r5, #0
 80023c4:	4e0c      	ldr	r6, [pc, #48]	; (80023f8 <__libc_init_array+0x38>)
 80023c6:	4c0d      	ldr	r4, [pc, #52]	; (80023fc <__libc_init_array+0x3c>)
 80023c8:	1ba4      	subs	r4, r4, r6
 80023ca:	10a4      	asrs	r4, r4, #2
 80023cc:	42a5      	cmp	r5, r4
 80023ce:	d109      	bne.n	80023e4 <__libc_init_array+0x24>
 80023d0:	f000 f832 	bl	8002438 <_init>
 80023d4:	2500      	movs	r5, #0
 80023d6:	4e0a      	ldr	r6, [pc, #40]	; (8002400 <__libc_init_array+0x40>)
 80023d8:	4c0a      	ldr	r4, [pc, #40]	; (8002404 <__libc_init_array+0x44>)
 80023da:	1ba4      	subs	r4, r4, r6
 80023dc:	10a4      	asrs	r4, r4, #2
 80023de:	42a5      	cmp	r5, r4
 80023e0:	d105      	bne.n	80023ee <__libc_init_array+0x2e>
 80023e2:	bd70      	pop	{r4, r5, r6, pc}
 80023e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023e8:	4798      	blx	r3
 80023ea:	3501      	adds	r5, #1
 80023ec:	e7ee      	b.n	80023cc <__libc_init_array+0xc>
 80023ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023f2:	4798      	blx	r3
 80023f4:	3501      	adds	r5, #1
 80023f6:	e7f2      	b.n	80023de <__libc_init_array+0x1e>
 80023f8:	080024f4 	.word	0x080024f4
 80023fc:	080024f4 	.word	0x080024f4
 8002400:	080024f4 	.word	0x080024f4
 8002404:	080024f8 	.word	0x080024f8

08002408 <memset>:
 8002408:	4603      	mov	r3, r0
 800240a:	4402      	add	r2, r0
 800240c:	4293      	cmp	r3, r2
 800240e:	d100      	bne.n	8002412 <memset+0xa>
 8002410:	4770      	bx	lr
 8002412:	f803 1b01 	strb.w	r1, [r3], #1
 8002416:	e7f9      	b.n	800240c <memset+0x4>

08002418 <strcat>:
 8002418:	4602      	mov	r2, r0
 800241a:	b510      	push	{r4, lr}
 800241c:	4613      	mov	r3, r2
 800241e:	781c      	ldrb	r4, [r3, #0]
 8002420:	3201      	adds	r2, #1
 8002422:	2c00      	cmp	r4, #0
 8002424:	d1fa      	bne.n	800241c <strcat+0x4>
 8002426:	3b01      	subs	r3, #1
 8002428:	f811 2b01 	ldrb.w	r2, [r1], #1
 800242c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002430:	2a00      	cmp	r2, #0
 8002432:	d1f9      	bne.n	8002428 <strcat+0x10>
 8002434:	bd10      	pop	{r4, pc}
	...

08002438 <_init>:
 8002438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243a:	bf00      	nop
 800243c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800243e:	bc08      	pop	{r3}
 8002440:	469e      	mov	lr, r3
 8002442:	4770      	bx	lr

08002444 <_fini>:
 8002444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002446:	bf00      	nop
 8002448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800244a:	bc08      	pop	{r3}
 800244c:	469e      	mov	lr, r3
 800244e:	4770      	bx	lr
